집합 연산자
 - UNION(합집합)
   · select * from group_star UNION select * from single_star; (중복 x)
   · select * from group_star UNION ALL select * from single_star; (중복 o)
   · ALL이 붙으면 중복된 데이터까지 포함
     UNION만 가지고 있다.

 - DIFFERENCE(차집합)
   · select * from group_star MINUS select * from single_star;

 - INTERSECT(교집합)
   · select * from group_star INTERSECT select * from single_star;
 ※ 테이블 집합 테이블 순서

Dual 테이블
 - 바로 산술 연산의 결과를 한 줄로 얻음
   · select * from dual; = X라는 결과가 나옴
   · select 24*60 from dual; = 1440

숫자 함수
 - 숫자 데이터를 처리하기 위한 함수
   · ABS : 절대값을 구함
     - select ABS(-10) from dual; = 10

   · COS : COSINE값을 반환

   · EXP : e(2.71828183 ··· )의 n승을 반환

   · FLOOR : 소수점 아래를 잘라버림
     - select FLOOR(34.5678) from dual; = 34

   · LOG : LOG 값을 반환

   · POWER : POWER(m,n), m의 n승을 반환

   · SIGN : SIGN(n) n<0이면 -1, n=0이면 0, n>0이면 1을 반환

   · SIN : SINE 값을 반환

   · TAN : TANGENT 값을 반환

   · ROUND : 특정 자리수에서 반올림
     - select round(3.83, 1) from dual; = 3.8
        소수점 한자리까지 표시
        소수점 2번째 자리를 반올림

   · TRUNC : 특정 자리수에서 잘라버림
     - select TRUNC(34.5678, 2) from dual; = 34.56
     - select TRUNC(34.5678, -1) from dual; = 30
     - select TRUNC(34.5678) from dual; = 34
   ※ ROUND와 TRUNC에서 2번째 매개값이 음수면 1의 자리, 10의 자리, ...
				      양수면 소수점 첫번째, 두번째, ...
				       0이면 소수점 전체를 잘라버림

   · MOD : 입력 받은 수를 나눈 나머지 값을 반환
     - select mod(10, 3) from dual; = 1
        10/3의 나머지
        자바의 %와 같다.

문자 처리 함수
 - 문자형의 값을 조작하여 변환된 문자 값을 반환하는 함수
 - 대 · 소문자간의 변환을 위한 함수와
    문자열을 정교하게 조작하는 함수로 나뉨

 - 대소문자 변환함수
   · UPPER : 전부 대문자
     - select UPPER('Welcome') from dual; = WELCOME
   · LOWER : 전부 소문자
     - select LOWER('wELcome') from dual; = welcome
   · INITCAP : 첫 글자만 대문자, 나머지는 소문자
     - select INITCAP('welcome') from dual; = Welcome

 - 문자 길이를 구하는 함수
   · LENGTH : 문자 길이를 반환(한글 1byte)
     - select LENGTH('Oracle') from dual; = 6
     - select LENGTH('오라클') from dual; = 3
   · LENGTHB : 문자 길이를 바이트로 반환(한글 2 혹은 3byte)
     - select LENGTHB('Oracle') from dual; = 6
     - select LENGTHB('오라클') from dual; = 9

 - 문자 조작 함수
   · CONCAT : 문자끼리 연결
     - select CONCAT('ab','cd') from dual; = 'abcd', 2개만 연결 가능

   · SUBSTR : 문자를 잘라서 추출(한글 1byte)
     - select SUBSTR('Welcome to Oracle', 2, 3) from dual; = 'elc'

   · SUBSTRB : 문자를 잘라서 추출(한글 2~3byte)
     - select SUBSTRB('가나다라마바사', 2, 5) from dual = 나
        2바이트부터 5바이트 읽기
        완벽하게 3바이트가 포함된 글자만 출력
        가는 2,3만 포함되고 1이 포함되지 않아서 출력이 안된 것
        나는 4,5,6이 포함되서 출력

   · INSTR : 특정 문자의 위치 값을 반환(한글 1byte)
     - select INSTR('데이터베이스', '이', 4, 1) from dual; = 5
       매개값은 대상, 찾을 글자, 시작 위치, 시작위치부터 몇번째에 있는 것

   · INSTRB : 특정 문자의 위치 값을 반환(한글 2~3byte)
     - select INSTRB('데이터베이스', '이', 4, 1) from dual; = 4
        4바이트부터 '이'가 있는 바이트의 시작 바이트 수를 리턴
        4바이트에서 시작해서 '이'가 4바이트에 있으니 4,5,6바이트 중 4바이트를 반환

   · LPAD, RPAD : 입력 받은 문자열과 기호를 정렬하여 특정 길이의 문자열로 반환
     - select LPAD('Oracle', 20, '#') from dual; = ##############Oracle
        자리를 20칸 마련하고 데이터를 오른쪽부터 채우고 남은 칸은 #으로 채움
     - select RPAD('Oracle', 20, '#') from dual; = Oracle##############
        자리를 20칸 마련하고 데이터를 왼쪽부터 채우고 남은 칸은 #으로 채움

 - 형변환 함수
   · 자료형을 변환시키고자 할 때 사용
   · TO_CHAR : 날짜형 or 숫자형을 문자형으로 변환
     - TO_CHAR(날짜 데이터, '출력형식')
     - 날짜 출력 형식
       · YYYY : 년도 표현(4자리)
       · YY :  년도 표현(2자리)
       · MM : 월을 숫자로 표현
       · MON : 월을 알파벳으로 표현
       · DAY : 요일 표현
       · DY : 요일을 약어로 표현
     ex) select sysdate, to_char(sysdate,'yyyy/MM/dd') from dual;
          sysdate : 컴퓨터의 현재 시간을 가져오는 것
     - 시간 출력 형식
       · AM or PM : 오전, 오후 시각 표시
       · HH or HH12 : 시간(1~12)
       · HH24 : 시간(0~23)
       · MI : 분 표현
       · SS : 초 표현
     ex) select sysdate, to_char(sysdate,'yyyy/MM/dd, AM HH:MI:SS') from dual;
     - 숫자형을 문자형으로 변환
       · 0 : 자릿수를 나타내며 자릿수가 맞지 않을 경우 0으로 채움
       · 9 : 자릿수를 나타내며 자릿수가 많지 않을 경우 공백
       · L : 각 지역별 통화 기호
       · . : 소수점
       · , : 천 단위 자리 구분
     ex) select to_char(123400, 'L999,999,999') from dual; = \123,400

   · TO_DATE : 문자형을 날짜형으로 변환
     - TO_DATE('문자', 'format')
     ex) select to_date(sysdate,'yyyy/MM/dd') from dual;
          sysdate 자리에 임의의 날짜를 지정할 수 있음

   · TO_NUMBER : 문자형을 숫자형으로 변환
     - select to_number('199999') from dual;
   ※ 단 문자형이 숫자로만 이루어져 있어야 TO_DATE나 TO_NUMBER로 변환 가능

 - 날짜 함수
   · DATE형에 사용하는 함수
   · 결과 값으로 날짜 또는 시간을 얻음
     - SYSDATE : 시스템에 저장된 현재 날짜를 반환

     - MONTHS_BETWEEN : 날짜와 날짜 사이의 개월 수를 구함
       · select ename, sysdate 오늘, to_char(hiredate, 'yyyy/mm/dd')
                                          , trunc(MONTHS_BETWEEN(sysdate, hiredate)) from emp;

     - ADD_MONTHS : 특정 개월 수를 더한 날짜를 구함
       · select ename, to_char(add_months(hiredate, 6), 'yyyy-mm-dd') from emp;
         hiredate에 6개월을 더한 값을 출력

     - NEXT_DAY : 해당 요일의 가장 가까운 날짜를 반환
       · select to_char(sysdate, 'yyyy/mm/dd'), to_char(NEXT_DAY(sysdate, 'MONDAY'),'yyyy/mm/dd') from dual;
         이렇게 사용하면 오류 발생
         현재 컴퓨터 시스템의 국가형식이 대한민국이라서 영어요일은 오류 발생
         한국 요일이나 숫자를 사용해야 한다(일=1, 월=2, ...) 
       · select to_char(sysdate, 'yyyy/mm/dd') 오늘,
                 to_char(next_day(sysdate,'월'),'yyyy/mm/dd') 월요일
                 from dual;
       · select to_char(sysdate, 'yyyy/mm/dd') 오늘,
                 to_char(next_day(sysdate,2),'yyyy/mm/dd') 월요일
                 from dual;

     - LAST_DAY : 각 월의 마지막 날짜를 반환
       · select ename, to_char(hiredate,'yyyy/mm/dd'), to_char(last_day(hiredate), 'yyyy/mm/dd') from emp;

     - ROUND : 인자로 받은 날짜를 특정 기준으로 반올림
       · ROUND(date, format)
       · 숫자 이외에 날짜에 대해서도 반올림 가능
         - CC, SCC : 4자리 연도의 끝 두 글자를 기준으로 반올림
         - SYYY, YYYY, YEAR, SYEAR, YYY, YY, Y : 년(7월 1일부터 반올림)
         - DDD, D, J : 일을 기준
         - HH, HH12, HH24 : 시를 기준
         - Q : 한 분기의 두 번째 달의 16일을 기준으로 반올림
         - MONTH, MON, MM, RM : 월(16일을 기준)
         - DAY, DY, D : 한 주가 시작되는 날짜
         - MI : 분을 기준   

     - TRUNC : 인자로 받은 날짜를 특정 기준으로 버림
       · TRUNC(date, format)
       · select TO_CHAR(TRUNC(hiredate, 'MONTH'), 'yyyy/MM/dd') from emp;

NULL을 다른 값으로 변환하는 함수
 - NVL 함수는 NULL을 0 또는 다른 값으로 변환
   · NVL(expr1, expr2) = expr1이 null이면 expr2로 반환
   · NVL2(expr1, expr2, expr3) = expr1이 null이 아니면 expr2를 반환, null이면 expr3를 반환

 - NULLIF : 두 표현식을 비교하여 동일하면 null, 다르면 첫번째 값을 반환
   · NULLIF(expr1, expr2)
     동일하지 않으면 expr1 반환
     동일하면 null 반환
   · ex) select nullif('a','a'),nullif('a','b') from dual; = null, a


 - COALESCE 함수
   · null이 아닌 첫 번째 인수를 반환
   · null을 빼고 첫번째로 나오는 값
   · ex) select coalesce('a','b','c','d') from dual; = a
         select coalesce('a','b',null,'c','d') from dual; = a
         select coalesce('a','b','c',null,'d') from dual; = a

DECODE 함수
 - switch case 문과 같은 기능
   · select ename, deptno, decode(deptno, 10, '경리부',
                                                       20, '인사과',
                                                       30, '영업부',
                                                       40, '전산부',
                                                       deptno) from emp; 
  				       ↑어디에도 포함되지 않는 경우

조건에 따라 서로 다른 처리가 가능한 CASE
 - CASE는 다양한 비교 연산자를 이용하여 조건을 제시할 수 있으므로 
    범위를 지정할 수도 있음
 - if else-if else와 유사한 구조
   · select ename, deptno, 
     case when deptno = 10 then '경리부'
            when deptno = 20 then '인사부'
            when deptno = 30 then '영업부'
            when deptno = 40 then '전산부'
            end as dname from emp;

그룹 함수
 - 단일행 함수는 값이 들어오면 들어온 갯수만큼 나감
    그룹 함수는 값이 들어오면 종합해서 1개만 나감
   · SUM : 그룹의 누적 합계를 반환
   · AVG : 그룹의 평균을 반환
   · COUNT : 그룹의 총 개수를 반환
     - null 값은 세지 않음
     - COUNT(*) : 테이블의 전체 로우 수를 구함
   · MAX : 그룹의 최대값
   · MIN : 그룹의 최소값
   · STDDEV : 그룹의 표준편차
   · VARIANCE : 그룹의 분산을 반환

Group by절
 - 특정 컬럼을 기준으로 그룹 함수를 사용해야 할 경우
     어떤 컬럼 값을 기준으로 그룹 함수를 적용해 줄지를 결정할 때 사용
   · 부서별로 총합(부분합)
      select deptno, sum(sal) from emp group by deptno;
   · 직급별로 총합(부분합)
      select job, sum(sal) from emp group by job;
   · 부서별 직급이 사원인 사람들의 월급 총합
      select deptno, sum(sal) from emp where job='사원' group by deptno;
   · 김씨 성을 가진 사람들의 월급 평균
      select job, avg(sal) from emp where ename like '김%' group by job;
   · 입사일이 2000년부터 2003년 사이
      select job, avg(sal) from emp where substr(hiredate, 1, 2) in('00','01','02','03') group by job;
   · 부서번호, 최대값, 최소값을 구해서 최대값 오름차순으로 정렬
      select deptno, max(sal), min(sal) from emp group by deptno order by max(sal);

그룹 결과 제한 HAVING절
 - SELECT절에 조건을 사용하여 그룹의 결과를 제한할 때 사용
    (그냥 결과를 제한할 때는 WHERE절 사용)
   · 평균이 500 이상만 출력
      select deptno, avg(sal), max(sal), min(sal) from emp group by deptno having avg(sal) >= 500;

※ select deptno, avg(sal), max(sal), min(sal) from emp group by deptno having avg(sal) >= 500 order by deptno;
   순서가 정해져 있는것, 
   검색 1등 WHERE조건절 2등 그룹 3등 HAVING조건절 4등 정렬 5등


















