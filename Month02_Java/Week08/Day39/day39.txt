TCP 네트워킹
 - TCP(Transmission Control Protocol) : 연결 지향적 프로토콜
 - 연결 지향 프로토콜 : 클라이언트가 서버와 연결된 상태에서 데이터를 주고 받는 프로토콜
		     클라이언트가 연결을 요청하고 서버가 연결을 수락하면 통신 선로가 고정되고,
		     모든 데이터는 고정된 통신 선로를 통해서 순차적으로 전달
 		     직접 건내주기 때문에 데이터 손실이 없음 
		     속도가 느리다.
		     비용이 비싸다.	

 - UDP : 비연결 지향 프로토콜
           서버쪽이 오픈되지 않아도 우체통같은 곳에 데이터를 넘겨줄 수 있음
           데이터 손실이 있을 수 있음                     
           속도가 빠르다.
           비교적 비용이 저렴하다.

 - 서버소켓 : 클라이언트와 연결 요청을 해 오면 연결을 수락하는 것, 
	     수락하면 소켓으로 넘어간다.
 - 소켓 : 연결된 클라이언트와 통신하는 것
 - 바인팅 포트 : 클라이언트가 서버에 접속할 포트
                     서버는 고정된 포트 번호에 바인딩해서 실행되므로
	         서버소켓을 생성할 때 포트 번호 하나를 지정
 - 클라이언트는 서버의 IP 주소와 바인딩 포트 번호로 소켓을 생성해서 연결 요청을 할 수 있다
 - 순서 : 서버소켓은 클라이언트가 연결 요청을 해 오면 accept()로 연결 수락을 하고 
           통신용 소켓을 생성
           클라이언트와 서버는 각각 소켓을 이용해서 데이터를 주고 받음
           1단계 : 포트 바인딩
           2단계 : accept()
           3단계 : ServerSocket 만들고 리턴

Socket 데이터 통신
 - 클라이언트가 연결 요청하고 서버가 연결 수락했다면 양쪽 Socket 객체로부터
    각각 입출력 스트림을 얻을 수 있다.
 - Socket으로부터 입력 스트림 얻기
   InputStream is = socket.getInputStream();
   출력 스트림 얻기
   OutputStream os = socket.getOutputStream();
 - 상대방에게 데이터를 보내기 위해서는 보낼 데이터를 byte[]로 생성
    이것을 매개값으로 해서 OutputStream의 write()를 호출
 - 상대방이 보낸 데이터를 받기 위해서는
    받은 데이터를 저장할 byte[]을 하나 생성하고,
    이것을 매개값으로 해서 InputStream의 read() 호출


스레드 병렬처리
 - 서버쪽에서 여러명의 클라이언트에게 받아야 하는 경우
    스레드를 사용해서 처리
 - 연결 수락을 위해 서버 소켓의 accept()를 실행하거나 서버 연결 요청을 위해
   소켓 생성자 또는 connect()를 실행할 경우 해당 작업이 완료되기 전까지 블로킹(blocking)된다.
 - 데이터 통신할 때도 마찬가지로 InputStream의 read()는 상대방이 데이터를 보내기 전까지 블로킹
 - OutputStream의 write()는 데이터를 완전하게 보내기 전까지 블로킹
 - 서버소켓과 소켓은 동기 방식(블로킹)으로 구동된다.
블로킹 = 멈춰있는 것

 - 문제점 : 스레드로 병렬처리할 경우 수천개의 클라이언트가 동시에 연결되면
               서버에서 수천개의 스레드가 생성되기 때문에 
               서버 성능이 급격히 저하되고 다운되는 경우가 발생

 - 해결책 : 클라이언트의 폭증으로 인해 서버의 과도한 스레드 생성을 방지하려면 스레드풀을 사용
 - 스레드풀의 처리순서
   1. 클라이언트가 연결 요청
   2. 서버의 스레드풀에서 연결 수락을 하고 소켓 생성
   3. 클라이언트가 작업 처리 요청(작업큐에 들어감)
   4. 서버의 스레드풀에서 요청을 처리(작업큐에서 가져와서 처리)
   5. 응답을 클라이언트로 보냄

1:1채팅은 서버1개:클라이언트1개
1:다채팅은 서버1개:클라이언트 여러개

JavaFX : 자바코드로 화면을 구현할 수 있는 것
           자바 표준 UI였던 SWING을 대체하기 위해 만들어진 더 가볍고 강력한 라이브러리