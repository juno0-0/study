FileInputStream / FileOutputStream
 - 모든 종류의 파일을 읽고 쓸 수 있다.
 - 2개를 같이 사용하면 파일을 복사할 수 도 있다.

FileReader / FileWriter
 - 문자 파일을 읽고 쓸 수 있음.
 - FileIn/OutStream보다 문자 파일을 읽고 쓰는 경우 속도가 빠름

close()는 먼저 열린게 나중에 닫히는 것

메모장에서 파일을 열었을 때 글자가 다 깨진 경우 = 메모장으로 열 수 없는 파일

보조 스트림
 - 다른 스트림과 연결되어 여러 가지 편리한 기능을 제공
 - 보조 스트림은 자체적으로 입출력을 수행할 수 없다.(기반이 있어야함)
    기반 스트림 = FileReader, FileWriter, Reader, Writer 등
 - 문자 변환, 입출력 성능향상, 기본 데이터 타입 입출력, 객체 입출력 등의 기능 제공
 - 입력 -> 보조 -> 프로그램 -> 보조 -> 출력
   입력 -> 보조 -> 보조 -> 프로그램 -> 보조 -> 보조 -> 출력

문자 변환 보조 스트림
 - 바이트 기반 스트림이면서 입출력 데이터가 문자라면 Reader/Writer로 변환해서 사용 가능


성능향상 보조 스트림
 - 주기억장치 --> 버퍼 메모리 레지스터 --> 프로세스
 - 입출력장치 --> 채널 --> 주기억장치
 - 버퍼 메모리 : CPU의 성능 향상의 메모리

 - CPU의 성능을 향상시키기 위해 1. 버퍼 메모리
			      2. 채널

 - 프로그램 -> 메모리 버퍼 -> 하드 디스크(한번에 버퍼 내용을 전송) 
 - 프로그램 <- BufferedXXX <- 입력 소스(미리 버퍼에 데이터를 채움)
   ex) Writer의 Buffered는 BufferedWriter

 - BufferedXXX는 기본 생성자가 없음


기본 타입 입출력 보조 스트림
 - 바이트 기반 스트림은 바이트 단위로 입출력하기 때문에 
    자바의 기본 데이터 타입 단위로 입출력할 수 없다.
    그래서 DataInputStream/DataOutputStream 보조 스트림을 연결하여 
    기본 데이터 타입으로 입출력 한다.


프린트 보조 스트림
 - 입력은 없고 출력만 함

객체 입출력 보조 스트림★★★★★
 - 자바는 메모리에 생성된 객체를 파일 또는 네트워크로 출력 할 수 있다.
 - 객체는 문자가 아니기 때문에 바이트 기반 스트림으로 출력해야 함
 - 객체의 데이터(필드값)를 일렬로 늘어선 
    연속적인 바이트로 변경해야 하는데 이것이 객체 직렬화(serialization)
 - 역직렬화(deserialization) : 파일에 저장되어 있거나 네트워크에서 전송된 객체를 읽을 수 있는데
                                    입력 스트림으로부터 읽어들인 연속적인 바이트를 객체로 복원하는 것

본사에서 자바로 응용프로그램을 사용 <--> 네트워크 <--> 지사에서 자바로 응용프로그램을 사용

본사와 지사는 네트워크로 자료를 주고 받음
자바에서 네트워크로 나가는 것이 직렬화(바이트 기반 스트림이 되는 것), ObjectOutputStream
네트워크에서 자바로 들어오는 것이 역직렬화(바이트 기반 스트림이 자바로 보이는 것), ObjectInputStream

사용자 정의 클래스를 직렬화 하려면 Serializable을 implements 한다.

static과 transient는 직렬화할 수 없다.

transient : 직렬화에서 제외하고 싶은 경우 사용하는 키워드
              패스워드같이 보안 정보가 직렬화 과정에서 제외되야 하는 경우 사용
              데이터를 전송하고 싶지 않을 경우 사용

직렬화한 바이트 기반 스트림을 직접 들어가서 수정하고 역직렬화하면 오류 발생
왜냐하면 serialVersionUID 필드가 바뀌기 때문에
(직렬화시 자동으로 serialVersionUID 필드에 값이 담기고
역직렬화 시 serialVersionUID 필드의 값이 
직렬화시 만들어진 serialVersionUID 필드의 값과 같으면 역직렬화가 진행)
serialVersionUID : 식별자
serialVersionUID 필드의 값을 임의로 넣을 수도 있다.
(명시적으로 생성하면 자동으로 생성되지 않는다.)

writeObject()와 readObject() 메소드
 - 두 클래스가 상속 관계에 있을 경우 부모 클래스가 Serializeable 인터페이스를 구현하고 있으면
   자식 클래스에서 Serializeable를 구현하지 않아도 자식 객체를 직렬화하면 부모와 자식의 필드가 모두 직렬화된다.
 - 하지만 부모 클래스가 serializable를 구현하고 있지 않고 자식 클래스만 serializable구현하고 있다면
   자식 객체를 직렬화시 부모의 필드는 직렬화에서 제외된다.
   이 경우 부모 클래스의 필드를 직렬화하고 싶다면
   부모 클래스를 Serializable 인터페이스를 구현하거나,
   자식 클래스가 writeObject()와 readObject()로 부모 객체의 필드를 직접 출력시킨다
   (여기서 writeObject()와 readObject()는 ObjectOutputStream과 ObjectInputStream의 메소드지만
    자식클래스에서 재정의하는 것)
 - 주의점 : 접근제한자가 private이 아니면 자동호출되지 않기 때문에 반드시 private을 붙여 준다.
 - writeObject()와 readObject()의 매개값인 ObjectOutputStream과 ObjectInputStream은 다양한 종류의
   writeXXX(), readXXX()를 제공하므로 필드 타입에 맞는 것을 사용
 - defaultWriteObject()와 defaultReadObject()는 자식 클래스에 정의된 필드들을 모두 직렬화, 역직렬화한다.
   




서버와 클라이언트
 - 네트워크는 여러대의 컴퓨터를 통신 회선으로 연결한 것
 - 서버 서비스를 제공하는 프로그램을 일반적으로 서버라고 함
 - 서비스를 받는 프로그램을 클라이언트라고 함

클라이언트에서 연결을 요청했을 때 연결이 올바르면 서버로 연결된다.
클라이언트에서 처리 요청을 하면 서버에서 처리하고 클라이언트에게 처리 결과를 응답하는 구조

클라이언트가 웹브라우저 프로그램이면 80포트로 웹 서버에 접속
클라이언트가 FTP 클라이언트 프로그램이면 21포트로 FTP 서버에 접속
클라이언트가 DB 클라이언트 프로그램이면 1521 포트로 DBMS에 접속
= 서버에 접속하려면 IP와 포트번호를 알면 된다.

포트번호
 - 한 대의 컴퓨터에서 다양한 서버 프로그램들이 실행될 수 있다.
 - 클라이언트는 어떤 서버와 통신해야 할 지 결정
 - IP는 컴퓨터의 네트워크 어댑터까지만 갈 수 있는 정보이기 때문에 컴퓨터 내에서
   실행하는 서버를 선택하기 위해서는 추가적인 정보(포트번호)가 필요
 - 0~65535 범위의 값을 가짐

java.net 패키지의 클래스, 인터페이스를 지원

인코딩 - 10진수 -> 2진수
디코딩 - 2진수 -> 10진수

