Wrapper 클래스
 - 기본형을 객체화하도록 도와주는 클래스
 - Boxing 
   · 기본형 --> 클래스
     Double d = new Double(3.14);
 - UnBoxing
   · 클래스 --> 기본형
     double d = i.doubleValue();
   · 다른 타입에 넣을 수도 있다.
     Float f = new Float(3.14);
     long l = f.longValue();
     ※ 단, 소숫점은 제외된다.
 - 모든 타입의 생성자에 매개값으로 문자열을 줄 수 있다.
    ex) Integer i = new Integer("100"); 
    ※ 단, Character는 제외
 - 숫자로만 이루어진 문자열타입을 숫자타입으로 바꿀 때
    정수 - Integer.parseInt(문자열변수)//문자열변수가 int형으로 바뀐다.
    실수 - Double.parseDouble(문자열변수)//문자열변수가 double형으로 바뀐다.
     Character를 제외한 다른 타입도 가능하다.
     ※ 문자열에 숫자가 아닌 문자가 있으면 NumberFormatException 발생)
 - 자동 Boxing와 자동 UnBoxing
   · 자동 Boxing 
          - 포장 클래스 타입에 기본값이 대입될 경우
	 Integer i = 100; //자동으로 힙영역에 객체 생성(new Integer(100);
   · 자동 UnBoxing
          - 기본 타입에 포장 객체가 대입될 경우
	 Integer i = new Integer(200);
	 int value = i; //자동 UnBoxing
	 int sum = i + value; //자동 UnBoxing
 - Wrapper 클래스는 boolean, char, byte, short, int만 ==,!=연산자를 사용 가능
    그냥 모든 타입을 equals()로 비교하는 것이 좋다.
    ※ Wrapper클래스의 equals()는 내부의 값을 비교하도록 오버라이딩 되어 있다.
    
Math 클래스
 - 수학 계산에 사용할 수 있는 static 메소드를 제공
 - random()의 기본 구조
   · 0.0<=random()<1.0
 - abs()
   · 절대값을 만들어주는 메소드

Random 클래스
 - 난수를 얻어내기 위해 다양한 메소드를 제공
 - 기본 생성자와 long seed를 매개값으로 받는 명시적 생성자가 있다.
   · Random r = new Random(long seed);
     seed값이 기준점이라서 비워두면 기준이 없기 때문에 규칙성도 없어서 난수가 발생
     seed값으로 시간을 주면 시간은 계속 변하기 때문에 규칙성도 계속 변해서 난수 발생
     seed값을 3, 5같이 상수로 주면 기준점이 생기고 규칙성이 생겨서 다음 수를 예측 가능(난수x)
 - r.nextInt(랜덤범위), r.nextDouble(), r.nextBoolean();
    랜덤범위는 포함되지 않으므로 랜덤범위에 1를 늘려서 적거나, 따로 뒤에 +1을 해준다.
    매개값을 안주면 타입범위 내의 난수를 리턴

Date 클래스
 - 날짜를 표현하는 클래스
 - 특정 시점의 날짜 정보를 저장하는 역할
 - Date d = new Date();
 - 만약 특정 문자열 형식으로 얻고 싶다면
    SimpleDateFormat 클래스를 이용한다.
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일");

Calendar 클래스
 - 달력을 표현한 클래스
 - 날짜와 시간을 조작하거나 비교하는 기능이 불충분
 - 추상 클래스이므로 new 연산자를 사용해서 인스턴스를 생성할 수 없다.
   ※ 추상클래스는 인스턴스가 없기 때문에
   추상클래스인 이유는 나라마다 날짜와 시간을 계산하는 방법이 다르기 때문이다.
 - Calendar c = Calendar.getInstance();
 - 사용할 때는 c.get(Calendar.YEAR)처럼 사용한다.
    그냥 Calendar.YEAR하면 저 필드가 가진 상수값이 출력된다.
    필드가 가진 상수값을 get()에 매개값으로 주면 그 필드가 실행된다.
     ex) YEAR = 1, MONTH = 2, WEEK_OF_YEAR = 3, ...
 - 월은 0부터 시작하기 때문에 +1을 해준다.
 - 요일은 일요일(1), 월요일(2), ... , 토요일(7)
 - 다른 시간대에 해당하는 날짜와 시간을 출력하기
    Calendar 클래스의 오버로딩된 다른 getInstance()를 이용
    ex) TimeZone timezone = TimeZone.getTimeZone("America/Los_Angels");
         Calendar c = Calendar.getInstance(timezone);
         getTimeZone()의 매개값은 getAvailableIDs()를 호출하여 얻을 수 있다.

Format 클래스
 - 자료의 형식을 맞춰주는 클래스
 1. DecimalFormat
   · 숫자 데이터를 원하는 형식으로 표현하기 위해서 패턴을 사용
       0 = 10진수(빈자리는 0으로 채움)
       # = 10진수(빈자리는 채우지 않는다.)
       .  = 소숫점
       ,  = 단위 구분
       E = 지수 문자     
       ;  = 양수와 음수의 패턴을 모두 기술할 경우, 패턴 구분자
       % = 100을 곱한 후 % 문자를 붙임
       -  = 음수 기호
       \u00A4 = 통화 기호
   · DecimalFormat df = new DecimaFormat("#,###.0");
     String result = df.format(1234567.89);
     출력 : 1,234,567.89
 2. SimpleDateFormat
   · Date 클래스에서 주로 사용
   · 날짜를 원하는 형식으로 표현하고 싶을 때 사용한다.
      y = 년	H = 시(0~23)
     M = 월	h = 시(1~12)
      d = 일	K = 시(0~11)
      D = 월 구분이 없는 일(1~365)
      E = 요일	k = 시(1~24)
      a = 오전오후	m = 분
      w = 년의 몇 번째 주
      W = 월의 몇 번째 주
      s = 초	S = 밀리초(1/1000)
   · SimpleDateFormat sdf = new SimpleDateFormat("HH : mm :  ss");
     형식을 생성자에 매개값으로 준다.
     사용은 String str = sdf.format(Date 객체);
 3. MessageFormat
   · 데이터를 파일에 저장하거나, 네트워크로 전송하거나,
     데이터베이스 SQL문을 작성할 때 등 많은 부분에서 일정한 형식의 문자열을 사용
   · 문자열에 데이터가 들어갈 자리를 표시해 두고,
     프로그램이 실행하면서 동적으로 데이터를 삽입해서 문자열을 완성
   · MessageFormat.format(형식, 값(배열));
   · format()을 호출해서 완성된 문자열을 리턴시킨다.
     ex) String text = "ID: {0}\n이름: {1}\n번호: {2}";
          Object[] arguments = {id, name, tel};//여기서 더 입력해도 들어가지 않음
          String result = MessageFormat.format(text, arguments);