Go go = new Go();
Thread g = new Thread(go);
혹은
Thread g = new Thread(new Go());
혹은
Thread g = new Thread(new Runnable(){ });

run()은 단일스레드
start()는 멀티스레드

Thread의 이름
 - 이름이 큰 역할을 하진 않음
    디버깅할 때 어떤 스레드가 어떤 작업을 하는지 조사할 목적으로 사용

 - 메인스레드는 main
   작성한 스레드는 Thread-n (0, 1, 2, ...)
   n은 작성한 순서대로 번호가 붙는다.
   (처음 작성한 스레드가 다른 이름이 있어도 다음 스레드는 1번)

 - setName()
   · Thread-n 대신 다른 이름으로 설정한다.
     ex) public 클래스명() {
	  setName("이름");
          }

 - getName()
   · 스레드의 이름을 리턴한다.

 - currentThread()
   · 코드를 실행하는 현재 스레드의 참조를 리턴
     [클래스명, 우선순위, 스레드를 발생시킨 곳]
     ex) Thread.currentThread().getName();를 출력하면 Thread의 이름이 출력

Thread의 우선순위
 - 동시성 : 멀티 작업을 위해 하나의 코어에서
              멀티 스레드가 번갈아가며 실행하는 성질

 - 병렬성 : 멀티 작업을 위해 멀티 코어에서 
              개별 스레드를 동시에 실행하는 성질
	  싱글 코어의 멀티 스레드 작업은 병렬성같지만
	  사실은 빠른 속도로 번갈아가며 실행하는 동시성 작업.

 - 우선순위가 높은 스레드가 실행 상태를 더 많이 가진다.

 - 우선순위는 1~10까지 부여되는데 1이 가장 느린 것, 10이 가장 빠른 것
   아무것도 부여받지 못하면 5

 - setPriority
   · Thread의 우선순위를 바꾼다.
     ex) 객체.setPriority(우선순위);
          직접 1~10까지 써도 되지만 상수를 사용할 수도 있다.
   	· Thread.MAX_PRIORITY = 10
            · Thread.NORM_PRIORITY = 5
   	· Thread.MIN_PRIORITY = 1

 - 쿼드 코어일 경우 4개의 스레드가 병렬성으로 실행될 수 있어서
   4개 이하의 스레드를 실행할 경우 우선순위가 크게 영향이 없다.  
 
 ※ 스케줄러 : 여러 스레드 처리의 순서를 담당하는 것
                  스케줄러는 운영체제가 관리함.
                  스레드의 우선순위를 10으로 주었다고 해서 
                  반드시 스케줄러가 참고만 할 뿐 먼저 처리하지는 않는다.
                  (스케줄러는 급하게 요청이 들어오는 것 부터 처리한다.)

Thread 동기화(Synchronized)
 - 핵심은 객체 공유

 - 임계 영역(critical section)
   · 멀티 스레드 프로그램에서 단 하나의 스레드만 실행할 수 있는 코드 영역
   · Java는 임계 영역을 지정하기 위해 동기화 메소드와 동기화 블록을 제공
     스레드가 객체 내부의 동기화 메소드 혹은 동기화 블록에 들어가는 즉시
     잠금을 걸어 다른 스레드가 임계 영역 코드를 실행하지 못하도록 한다.
     (동시에 여러 스레드가 객체를 사용하는 경우 메소드나 블록에 임계 영역을 걸면
      그 메소드나 블록은 한번에 하나의 스레드만 사용하고 다른 스레드는 대기한다.)

 - 동기화 메소드
   · 메소드 전체를 임계 영역으로 만든다.
     ex) public synchronized void method(공유 객체){
	        //임계 영역
          }

 - 동기화 블록
   · 메소드 내부에 동기화 블록을 만들어 블록만 임계 영역으로 만든다.
     ex) public void method(){
	   //여러 스레드가 실행 가능한 영역
	        synchronized(공유 객체){
		      //임계 영역
	        }
	   //여러 스레드가 실행 가능한 영역
         }		

Thread 상태(Process 상태와 동일)
 - NEW : 객체 생성
   ex) Go go = new Go();

 - RUNNABLE : 대기 상태
   · 아직 스케줄링이 되지 않아 실행을 기다리는 상태

 - RUNNING : 실행
   · 스케줄링이 선택한 스레드가 CPU를 점유하고 run()을 실행하는 상태

 - WAITING : 일시정지(다른 스레드가 통지할 때까지 기다림)
 - TIMED_WAITING : 일시정지(주어진 시간동안 기다림)
 - BLOCKED : 일시정지(사용할 객체의 잠금이 풀릴 때까지 기다림)

 - TERMINATED(dead) : 종료
   · 더 이상 실행할 코드가 없어서 스레드의 실행이 멈춘 상태

 - 스레드가 일시정지 상태에서 다시 실행 상태로 가려면 대기 상태를 거쳐야 한다.

 - 예를 들자면 NEW는 병원에 간 것이고, RUNNABLE은 접수를 하고 기다리는 것
   RUNNING은 진료를 받는 것이고, 
   WAITING or TIMED_WAITING, BLOCKED는 진료 중 xray를 찍어서 진료가 멈춘 것,
   xray 결과를 기다리느라 기다리는 RUNNABLE로 가고, 
   다시 RUNNING으로 가서 결과를 듣고,
   TERMINATED는 진료가 끝난 것.

Thread 상태 제어
 - 실행 중인 스레드의 상태를 변경하는 것

 - 상태 제어가 잘못되면 프로그램이 불안정해져서 멈추거나 종료된다.
   (멀티스레드 프로그래밍이 어려운 이유)

 - sleep(밀리초)
   · 실행 중인 스레드를 일정 시간 멈추게 하는 것
   · InterruptedException이 발생해서 try-catch와 같이 사용한다.

 - yield()
   · yield()를 호출한 스레드는 실행 대기 상태로 돌아가고 
    동일한 우선순위 or 높은 우선순위를 갖는
    다른 스레드에게 실행 기회를 양보하는 것
   · 무의미한 작업을 하는 스레드를 일시정지 하는 것

 - join()
   · join()을 사용한 스레드는 다른 스레드를 멈추고 대기 상태로 만든다.
     ex) t1.start();
          t2.start();
          t1.join();하면 t1이 다 끝날때까지 t2는 대기 상태
   · InterruptedException이 발생해서 try-catch와 같이 사용한다.

 - wait(), notify(), notifyAll()
   · 정확한 교대 작업이 필요한 경우 사용
   · 한 스레드가 작업을 완료하면 notify()를 호출해서 
     일시 정지 상태의 다른 스레드를 실행 대기 상태로 만들고, 
     자신은 두 번 작업을 하지 않도록 wait()을 호출하여 일시 정지 상태가 된다.
   · wait(long timeout), wait(long timeout, int nanos)를 사용하면
     notify()를 호출하지 않아도 지정된 시간이 지나면 자동적으로 실행 대기 상태가 된다.
   · notifyAll()은 wait()으로 일시정지된 모든 스레드를 대기 상태로 만든다.
   · 주의점(★★★) : 동기화 메소드 or 동기화 블록 안에서만 사용 가능

 - stop 플래그
   · 스레드는 자신의 run()이 모두 실행되면 자동적으로 종료되지만
     실행중인 스레드를 즉시 종료하는 경우가 있다.
     (동영상 보다가 중간에 사용자가 꺼버리는 경우)
   · stop()로 종료하면 스레드가 사용 중이던 자원들이 
     불안전한 상태로 남겨져서 사용 안함
   · stop 플래그
     boolean 타입의 필드를 사용해서 종료를 유도한다.
     (while()에 true/false를 가진 필드를 매개값으로 준다.)

 - interrupt()
   · 일시정지 상태에서 InterruptedException을 발생시켜
     예외처리 코드에서 실행 대기 상태 or 종료 상태로 갈 수 있도록 한다.
   · 방법1) A라는 스레드에서 B라는 스레드를 실행할 경우
              A가 B.interrupt()를 실행하면 B가 반복문을 실행하다 sleep()으로 일시 정지 상태가 될 때
              InterruptedException이 발생하여 catch 블록으로 이동
              B는 반복문을 빠져나와 run()을 정상 종료하게 된다.
         ex) try{
	       while(true) {
	            System.out.println("실행 중");
	            Thread.sleep(100);
	       }
	 catch (InterruptedException e) {}
   · 방법2) B에서 sleep()을 사용하지 않고, Thread.interrupted()를 사용해서 
              B의 interrupt()가 호출되었는지 확인하는 것 (interrupt()가 호출되었다면 true를 리턴)
         ex) while(true) {
	       System.out.println("실행중");
	       if(Thread.interrupted()) {
	            break;
	       }
	  }
   · interrupt()를 실행하면 즉시 InterruptedException이 발생하는 것이 아니라
     언젠가 스레드가 일시 정지 상태가 되면 InterruptedException이 발생하는 것
      = 일시 정지 상태가 안되면 의미가 없다.

 - wait(), notifyAll(), notify()는 Object 클래스의 메소드
    나머지는 Thread의 메소드

 - suspend(), resume(), stop()
   · suspend() : 일시 정지 상태로 만들고 resume()으로 풀어준다.
   · resume() : suspend()에 의해 일시 정지된걸 대기 상태로 만든다.           
   · stop() : 즉시 종료시킨다.