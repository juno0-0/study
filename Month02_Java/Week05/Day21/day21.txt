동등객체★★★
 - hashCode()와 equals()가 둘 다 true면 동등객체
   하나라도 false면 다른 객체

Deprecated : 예전 버젼에서는 있었는데 더 좋은게 나왔으니 이제 쓰지 마라.

Objects Class
 - 연산을 수행하는 정적 메소드들로 구성된 Object의 유틸리티 클래스
   Java.util에 들어있다.
 - Objects.메소드명 으로 사용한다.
 - compare(T a, T b, Comparator<T>c)★★★★★
   · java.util.Comparator<T>는 제네릭 인터페이스 타입으로 
    두 객체를 비교하는 compare(T a, Tb)가 정의되어 있다.
   · 두 객체를 비교자(Comparator)로 비교해서 int 값을 리턴
   · 이 메소드는 return (x < y) ? -1 : ((x == y) ? 0 : 1);처럼
     a가 b보다 작으면 음수, 같으면 0, 크면 양수를 리턴한다.(둘 다 null이면 0)
   · 다양한 클래스에 들어있지만 원리는 같다.
   · 사용 예
       public class CompareEx{
	public static void main(String[] args){
	     Student s1 = new Student(3, "아이유");
	     Student s2 = new Student(5, "조유리");
	     Student s3 = new Student(2, "박보영");
	     int result = Objects.compare(s1, s2, new StudentComparator());
	     //s1이 s2보다 작으면 음수, 같으면 0, 크면 양수
	}//end main()
	static class Student{
	     int num;
	     String name;
	     public Student(int num, String name){
		this.num = num;
		this.name = name;
	     }
	}//end Student
	//비교자 클래스 만들기★★★★
	static class StudentComparator implements Comparator<Student>{//Comparator를 연결하고 <타입>
	     @Override
	     public int compare(Student o1, Student o2){
		//return Integer.compare(o1.num, o2.num);//오름차순
		return Integer.compare(o2.num, o1.num);//내림차순
		↑이 식은 return (x < y) ? -1 : ((x == y) ? 0 : 1);//이 구조로 되어 있는 것
	     //만약 문자를 비교하는 경우 String 클래스의 compareTo를 쓴다.★★★
	       둘 중 하나라도 null이면 null이 발생할 수도 있다.
	     }
	     @Override
	     public int compare(Student o1, Student o2){
		//return o1.name.compareTo(o2.name);//오름차순
		return o2.name.compareTo(o1.name);//내림차순
	     }
	}//end StudentComparator
       }//end CompareEx

 - equals()와 deepEquals()
   · Objects.equals(Object a, Object b)는 두 객체의 동등을 비교하는데,
     기존 Object의 equals()와 다른 점은 a와 b가 모두 null일 경우 true를 리턴한다.
     (Object의 equals()는 null과 비교할 수 없음. NullPointerException 발생)
   · Objects.deepEquals(Object a, Object b)는 배열의 각 요소를 비교하는데,
     a와 b가 다른 배열일 때, 항목 값이 모두 같으면 true
     (Arrays.deepEquals()와 같은 기능)

 - hash()와 hashCode()
   · Objects.hash(Object value, ...)는 매개값들을 이용해서 해시 코드를 생성하는 역할
     클래스가 hashCode()를 재정의할 때 리턴값을 생성하기 위해 사용
     (원래 hashCode는 주소를 이용해서 만들지만, Objects의 hashCode()를 재정의해서
      매개값으로 hashCode를 만드는 것, 매개값이 같으면 같은 hashCode를 갖는다.)
   · Objects.hashCode(Object o)는 매개값으로 주어진 객체의 hashCode를 리턴
     (= o.hashCode()의 리턴값과 동일하다.)
     차이점은 매개값이 null이면 0을 리턴한다.
     (o.hashCode()는 null이면 NullPointerException이 발생)

 - isNull()과 nonNull(), requireNonNull()
   · Objects.isNull(Object obj)는 매개값이 null입니까? true/false 리턴
   · Objects.nonNull(Object obj)는 매개값이 null이 아닙니까? true/false 리턴
   · Objects.requireNonNull()는 세 가지로 오버로딩
     1) requireNonNull(T obj)
	- 매개값이 null이 아니면 매개값을 리턴,
	   null이면 NullPointerException을 발생시킨다.
     2) requireNonNull(T obj, String msg)
	- 위와 동일하지만 null이면 NullPointerException에 msg를 제공한다.
	   (try-catch에서 e.getMessage()를 하면 msg가 호출)
     3) requireNonNull(T obj, Supplier<String> msgSupplier)
	- 나중에 배움.
	
 - toString()
   · Objects.toString()은 두 가지로 오버로딩
     1) toString(Object o)
	- 매개값이 null이면 null을 리턴, 
	   null이 아니면 toString()으로 얻은 값을 리턴
     2) toString(Object o, String msg)
	- 매개값이 null이면 msg를 리턴


String Class
 - charAt(index)
   · 매개값으로 주어진 인덱스의 문자를 리턴

 - indexOf("찾는문자열")
   · 매개값으로 주어진 문자열이 시작되는 인덱스를 리턴
     만약 주어진 문자열이 포함되어 있지 않으면 -1을 리턴
      ex) 문자열.indexOf("찾는문자열")
 
 - equals()
   · Object의 equals()는 주소를 비교하지만,(==)
     String 클래스가 재정의해서 문자열을 비교한다.
   · String은 유일하게 같은 값을 가지고 있으면 같은 주소를 공유한다.
   · equalsIgnoreCase() : 대소문자를 가리지 않고 비교

 - getByte()
   · 시스템 파일로 만들거나, 네트워크로 문자열을 전송하거나, 문서를 암호화할 때 사용
   · 파일의 내용을 읽거나, 네트워크를 통해 주고 받는 데이터는 보통 byte[]
   · 문자열을 getByte()를 통해 시스템의 기본 문자셋으로 인코딩된 Byte배열로 만들어주는 메소드
   · Encoding : 사람의 언어에서 컴퓨터의 언어로(10진수를 2진수로)
   · Decoding : 컴퓨터의 언어에서 사람의 언어로(2진수를 10진수로)
     ※인코딩한 문자셋으로 디코딩을 해야 정확한 문자열을 얻는다.
   · String(byte[] bytes) : byte 배열을 문자열로 만든다.
   · String(byte[] bytes, String charsetName) : byte 배열을 문자열로 만드는데 
     어떤 특정한 문자셋으로 인코딩 되어 있다면 그 문자셋을 가지고 다시 디코딩을 해서 문자열로 만드는 것.
   · String(byte[] bytes, int offset, int length) : byte배열중에 offset부터 length만큼만 문자열로 만든다.
   · String(byte[] bytes, int offset, int length, String charsetName) : byte배열에서 offset부터 length만큼만 
     문자열로 만드는데 charsetName으로 인코딩되어 있다면 charsetName으로 디코딩해서 문자열로 만드는 것.
   · 특정 문자셋으로 인코딩된 바이트 배열을 얻을 경우
      ex) getBytes("EUC-KR");//한글은 2byte,  알파벳은 1byte
           getBytes("UTF-8");//한글은 3byte, 알파벳은 1byte
   · 잘못된 문자셋을 매개값으로 줄 경우 UnsupportedEncodingException 예외가 발생
   · 사용 예제
      ex) String str = "안녕하세요";
           byte[] bytes1 = str.getBytes();//인코딩, 10진수 --> 2진수
           String str1 = new String(bytes1);//디코딩, 2진수 --> 10진수

 - replace(char oldChar, char newChar)
   · oldChar에 원래문자, newChar에 바꾸고싶은 문자
   · 문자열도 가능하다.

 - replaceAll(String oldStr, String newStr)
   · oldStr에 원래문자열, newStr에 바꾸고싶은 문자열
   · 여러글자 수정할 때 사용("")

 ※ replace와 replaceAll의 차이
   · replaceAll에는 정규식을 사용할 수 있어서 replace에서 처리하지 못한 문자열도 처리 가능.

 - substring()
   · substring(index)는 index부터 끝까지 출력
   · substring(index1, index2)는 index1부터 index2 이전(미만)까지 출력

 - toLowerCase(), toUpperCase()
   · 문자열을 모두 소문자로, 대문자로 바꾼 값을 리턴
   · equalsIgnoreCase()와 같이 사용하는 편

 - trim()
   · 앞뒤 공백을 제거한다.
   · 글씨 중간에 있는 띄어쓰기는 지워지지 않는다.
   · 원래 문자열의 공백이 제거되는 것은 아님(출력에서만 제거되서 출력)

 - valueOf()
   · 기본형의 값을 문자열로 변환한다.

equalsIgnoreCase() : 대소문자를 가리지 않고 비교