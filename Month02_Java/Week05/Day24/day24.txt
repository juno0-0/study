ISO-8601 : 날짜와 시간의 표기에 관한 국제 표준 규격
 - 연월일로 기록하는 방법 
    (1992-01-30 or 19920130 1992년 1월 30일) 
 - 연과 연중 일수로 기록하는 방법 
    (1992-130 or 1992130 1992년의 130번째 날)
 - 연과 주와 주중 일수로 기록하는 방법 
    (1992-W07-7 또는 1992W077 1992년 7번째 주의 일요일)


java.time 패키지
1.날짜와 시간 객체 생성
 - 날짜와 시간을 조작하거나 비교하는 기능 등이 들어있음
 - java.time.chrono
  · ISO-8601에 정의된 달력 시스템 외에 
    다른 달력 시스템이 필요할 때 사용할 수 있는 API들이 포함
 - java.time.format
  · 날짜와 시간을 파싱(형을 바꾼다)하고 포맷팅하는 API들이 포함
 - java.time.temporal
  · 날짜와 시간을 연산하기 위한 보조 API들이 포함
 - java.time.zone
  · 타임존을 지원하는 API들이 포함
 - java.time
  · 날짜와 시간을 나타내는 핵심 API들이 포함
  · LocalDate : 로컬 날짜 클래스
      - 날짜 정보만 저장
      - now() : 컴퓨터의 현재 날짜 정보를 LocalDate 타입으로 리턴
      - of() : 매개값으로 주어진 날짜 정보를 LocalDate 타입으로 리턴
                날짜를 마음대로 조작
        · ex) LocalDate.of(년, 월, 일)      
      - getYear() : 년
      - getMonth(), getMonthValue() : 월(영어, 숫자)
      - getDayOfYear() : 일년의 몇 번째 일
      - getDayOfMonth() : 월의 몇 번째 일
      - getDayOfWeek() : 요일(영어)
      - isLeapYear() : 윤년(true/false)
  · LocalTime : 로컬 시간 클래스
      - 시간 정보만 저장
      - now() : 컴퓨터의 현재 시간 정보를 LocalTime 타입으로 리턴
      - of() : 매개값으로 주어진 시간 정보를 LocalTime 타입으로 리턴
	    시간을 마음대로 조작
        · ex) LocalTime.of(시, 분, 초, 나노초)
      - getHour() : 시간
      - getMinute() : 분
      - getSecond() : 초
      - getNano() : 나노초
  · LocalDateTime : 로컬 날짜 및 시간 클래스
      - LocalDate + LocalTime, 날짜와 시간을 저장
      - now() : 컴퓨터의 현재 날짜와 시간 정보를 LocalDateTime 타입으로 리턴
      - of() : 매개값으로 주어진 날짜와 시간 정보를 LocalDateTime 타입으로 리턴
        · ex) LocalDateTime.of(년, 월, 일, 시, 분, 초, 나노초)
      - LocalDate와 LocalTime의 메소드를 사용 가능
         (isLeapYear()는 LocalDate에만 있기 때문에 toLocalDate()로 타입을 변환 후 사용)
  · ZonedDateTime : 특정 타임존의 날짜와 시간 클래스
      - 다른 나라의 날짜와 시간 정보를 저장
      - 맨 뒤에 +ZoneOffset[Asia/Seoul]같이 타임존에 대한 정보가 붙는다.
      - ZoneOffset : 협정세계시(UTC)와의 시차
        · ex) ZonedDateTime.now(ZoneId.of("나라")) 
        · of()의 매개값은 java.util.TimeZone의 getAvailableIDs()가 리턴하는 값
      - LocalDate와 LocalTime의 메소드를 사용 가능
         (isLeapYear()는 LocalDate에만 있기 때문에 toLocalDate()로 타입을 변환 후 사용)
      - getZone() : ZoneId를 리턴
      - getOffset() : 시차를 리턴
  · Instant : 특정 시점의 Time-Stamp 클래스
      - 주로 특정한 두 시점 간의 시간적 우선순위를 따질 때 사용
      - Date 클래스와 유사하지만 Date는 현재 컴퓨터가 기준 
                                         Instant는 세계협정시가 기준
      - isBefore(), isAfter() : 시간의 앞뒤 여부를 확인
        · ex) 시간1.isBefore(시간2), 시간1.isAfter(시간2)
      - until() : 두 시점 간의 차이를 리턴
        · ex) 시간1.until(시간2, ChronoUnit.HOUR);
  · ISO-8601에 정의된 달력 시스템에 기초

2. 날짜와 시간 조작
 - puls/minus+년or월or일or주(long)
   ex) plusYears(long), minusYears(long)
   리턴타입 : LocalDate, LocalDateTime, ZonedDateTime
 - puls/minus+시or분or초or나노초(long)
   ex) plusSecounds(long), minusSecounds(long)
   리턴타입 : LocalTime, LocalDateTime, ZonedDateTime
 - "." 연산자로 연결해서 순차적으로 호출 가능
   ex) LocalDateTime target = now.plusYears(1)
			       .minusMonths(2)
			       .minusDays(3);
 - with+년or월or년의 일or월의 일()
   ex) withDayOfYear(int)
 - with+시or분or초or나노초()
   ex) withMinute(int)
 - with(TemporalAdjuster adjuster) : 현재 날짜를 기준으로 상대적인 날짜를 리턴
   ex) with(TemporalAdjusters.firstDayOfYear()) : 이번 해의 첫 번째 일

3. parsing과 Formatting
 - parsing
  · 문자열을 파싱해서 날짜와 시간을 생성하는 메소드
    String str = "2024-05-21";처럼 문자열에 날짜나 시간이 있으면
    LocalDate localdate = LocalDate.parse("2024-05-21");해서
    LocalDate타입으로 바꿀 수 있다.

 - Formatting
  · 날짜와 시간을 포맷팅된 문자열로 변환하는 메소드
  · 날짜나 시간의 형식이 일반적이지 않은 경우, 
    패턴을 만들어 파싱하는데 사용할 수 있다.
    String str = "2019년 01월 10일";
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy년 MM월 dd일");
    LocalDate date = LocalDate.parse(str, formatter);
    System.out.println(date);
    System.out.println(date.format(formatter));
    결과 2019-01-10
          2019년 01월 10일

StringBuilder
 - String과 문자열을 더할 때 새로운 객체를 생성하는 것이 아니라
   기존의 데이터에 더하는 방식을 사용하기 때문에 속도도 빠르고
   상대적으로 부하가 적게 걸린다.
 - append(추가될 값);
   ex) str.append(i)하면 i가 계속 str에 누적된다 = +=연산자

Wrapper Class의 값비교는 ==말고 equals()를 사용하자.

Thread
 - Program : 프로그래밍 언어로 구성된 소스코드로 만든 것
 - Process : 실행중인 프로그램
	   운영체제로부터 실행에 필요한 메모리를 할당받는다.
 - multi Process : 각각 메모리를 할당받았기 때문에 독립적
	           하나의 프로세스에서 오류가 발생해도 다른 프로세스에게 영향을 끼치지 않음
 - multi tasking : 두 가지 이상의 작업을 동시에 처리하는 것
	          운영체제는 멀티태스킹을 할 수 있도록 CPU 및 메모리 자원을
	          프로세스마다 적절히 할당해주고 병렬로 실행
	          꼭 멀티 프로세스를 뜻하지는 않음.
 - Thread : 하나의 실행 흐름
	  프로세스 1개는 실행될 때부터 종료될 때까지 1개 이상의 스레드를 가지고 있다.
 - single Thread : 한 개의 처리 경로로 작업을 수행
	           순서대로 작업이 이루어지기 때문에
	           빨리 끝날 수 있는 작업도 오래 걸릴 수 있다.
	           하나의 작업에서 오류 발생시 다른 작업에 영향을 미치지 않아서
	           설계가 쉽고 안정적이다.
 - multi Thread : 한 개의 처리 경로를 여러개로 나누어 동시 작업이 가능하다.★
	          한 개의 프로세스 안에 여러개의 스레드가 존재하는 것
	          하나의 프로세스를 동시에 처리하는 것 처럼 보이지만
	          사실은 매우 짧은 단위의 시간으로 분할하여 차례로 처리한다.(병렬적)
	          하나의 프로세스 내부에 생성되기 때문에 스레드 하나가 예외를 발생시키면
	          프로세스 자체가 종료될 수 있어 다른 스레드에게 영향을 준다.
	          (예외처리를 잘 해야 한다.)
 - main Thread : 모든 자바 애플리케이션은 메인스레드가 main()을 실행하면서 시작된다.
	          (반드시 존재한다.)
	         단일스레드는 메인스레드가 종료되면 프로세스도 종료되지만,
	         멀티스레드는 메인스레드가 종료되도 실행중인 스레드가 하나라도 있다면 종료되지 않음
 - Thread 생성
  1. Runnable을 implements
      run()을 재정의한 뒤 run()안에 스레드가 실행할 코드 작성
      ex) class A implements Runnable{
	     public void run(){
		스레드가 실행할 코드;
	     }
          }            
      Runnable은 작업 내용을 가지고 있는 객체이지 실제 스레드는 아님.
      Runnable 구현 객체를 생성한 후 이것을 매개값으로 해서 
      Thread 생성자를 호출하면 작업스레드가 생성
      ex) Runnable a = new A();
           Thread t = new Thread(a);
      하지만 보통 익명 객체를 매개값으로 사용한다.
      ex) Thread t = new Thread( new Runnable(){
	     public void run(){
		스레드가 실행할 코드;
	     }
          });
      작업스레드는 생성되는 즉시 실행되는 것이 아니라,
      start()를 호출해야 실행된다.
      ex) t.start();  
      추후 다른 클래스를 상속받아야 할 경우 사용
  2. Thread를 extends 
      더 이상 상속을 받지 않는 클래스이거나 편의성을 위해 사용      	          

프로세스 상태
NEW : 쓰레드가 객체 생성한 상태
         클래스 참조변수 = new 클래스();
         생성되고 아직 start()가 호출되지 않은 상태
RUNNABLE : 실행 상태로 언제든지 갈 수 있는 상태 (실행 대기)
RUNNING(실행) : 쓰레드가 동작하고 있는 상태
		run()이 실행되고 있는 상태
BLOCKED : run()을 모두 끝내지 못하고 중간에 정지되어 있는 상태
	 일시정지된 상태
	 sleep(), yeild(), join() 같은 메소드 요청시 발생
WAITING : 쓰레드의 작업이 종료되지는 않았지만 실행도 안되는 일시정지 상태
TIMED_WAITING : 일시 정지 시간이 지정된 상태
TERMINATED(dead) : run()을 모두 처리하여 쓰레드가 제거 되는 상태
            	  쓰레드의 작업이 종료된 상태

쓰레드 우선순위
 - 쓰레드 스케쥴링 : 멀티쓰레드는 동시성 or 병렬성으로 실행되며
		  어떤 순서대로 실행할 것인지를 결정하는 것
		  동시성 : 하나의 코어에서 멀티 스레드가 번갈아가며 실행하는 성질
		  병렬성 : 멀티 코어에서 개별 스레드를 동시에 실행하는 성질
			 (빠르게 번갈아가면서 실행하는 동시성 작업)
 - 우선순위 방식 : 1~10까지 부여
	           1이 낮은 것
	           우선 순위를 부여하지 않으면 모든 쓰레드는 
	           기본적으로 5의 우선순위를 받는다.
		.setPriority(Thread.MIN_PRIORITY 또는 1) 
		.setPriority(Thread.MAX_PRIORITY 또는 10) 
		하지만 스케쥴러에 따라 혹은 CPU 갯수에 따라 달라질 수 있다.