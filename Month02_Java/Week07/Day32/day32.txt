제네릭
 - 타입을 미리 정하는게 아니라 구현할 때 넣는 것
 - 멀티 타입 파라미터
   · <T, M> 
   · ","로 구분

1. 클래스 제네릭
2. 메소드 제네릭 - 리턴타입, 매개변수

<T extends 상위타입> = T에는 상위타입의 자손만 들어올 수 있다.
---------------------------------------------------------------

운영체제에서 보는 와일드 문자
 - * : 여러글자를 대신 하는 와일드 문자
 - ? : 한글자만 대신 하는 와일드 문자
 ※ 와일드 문자 = 아무거나 들어갈 수 있음


와일드카드
 - "?"를 일반적으로 와일드 카드라고 함
 - <?>
   · 아무거나 들어갈 수 있는 것
 - <? extends 상위타입>
   · 상위 타입이나 상위 타입의 자식(extends)들만 들어갈 수 있는 것
 - <? super 하위타입>
   · 하위 타입이나 하위 타입의 부모(super)만 들어갈 수 있는 것

	public int i(List<? extends Number> list, Map map) {
		return 0;
	}
	public String str(List<?>list) {
		return "";
	}
	public List<? super Number> test(List<? super Number> list){
		return list;
	}

 - 타입 파라미터로 배열을 생성하려면 new T[n]형태로 배열을 생성할 수 없고,
    (T[])(new Object[n]) 형태로 해야함
    어떤 타입이 올지 몰라서 Object 타입의 배열에 매개변수로 받은 n을 크기로 주고
    T[] 타입으로 형변환을 한다.

 - 제네릭 타입의 상속과 구현
   · 자식의 제네릭은 부모의 제네릭보다 같거나 많아야 함

타입파라미터로 배열을 생성
private T[] array;
array = (T[])(new Object[capacity]);


람다식
 - 익명함수를 생성하기 위한 식
 - 긴 코드를 간결하게 만드는 것
 - 모든 인터페이스를 다 람다식으로 만들 순 없다.
   · 인터페이스에 추상메소드가 1개만 있을 경우 사용 가능
     (추상 메소드가 2개 이상이라면 사용 불가)
 - 형태는 매개 변수를 가진 코드 블록이지만,
    런타임시 익명 구현 객체를 생성
    람다식 -> 매개 변수를 가진 코드 블록 -> 익명 구현 객체
 - 구조
   · 인터페이스 변수 = () -> { };
   · 인터페이스 변수 = (메소드의 매개변수, ...) -> {실행문, ...};
     (매개변수)가 { }로 들어가서 수행된 것을 인터페이스 타입의 변수에 넣는 것
     모습은 함수 정의 형태를 띄고 있지만 실행시 익명 구현 객체로 생성된다.
     () : { }를 실행하기 위해 필요한 값을 제공
     -> : 매개 변수를 이용해서 { }를 실행
     ex) (int a, String b) -> {System.out.println(a);System.out.println(b);};
   · 매개변수의 타입을 생략해도 된다.
     ex) (a,b) -> {System.out.println(a);System.out.println(b);};
   · 매개변수가 1개일 경우 ( )를 생략할 수 있다.
     ex) a -> {System.out.println(a);};
   · { }에 실행문이 1개이면 { }를 생략할 수 있다.
     ex) a -> System.out.println(a);

   · 매개변수가 없다면 ( )는 꼭 써야한다.
     ex) () -> { };
   · 리턴값이 있을 경우
     ex) (a, b) -> {return x+y;};
   · { }에 return문만 있는 경우 { }와 return을 생략할 수 있다.
     ex) (a, b) -> x+y;

 - 자바는 메소드가 항상 클래스의 구성멤버로 선언되야 하기 때문에
    람다식은 단순히 메소드를 선언하는 것이 아니라
    이 메소드를 가지고 있는 객체를 생성하는 것
 - 람다식은 인터페이스 변수에 대입
 - 람다식이 대입될 인터페이스를 람다식의 타겟 타입이라고 함

 - 람다식이 될 수 있는 인터페이스 = 함수적 인터페이스
   함수적 인터페이스 : 추상메소드가 하나만 선언된 인터페이스

 - @FunctionalInterface : 인터페이스에 추상메소드가 1개다라는 뜻
   만약 @FunctionalInterface가 있는데 추상메소드를 만들지 않거나 2개 만들면 오류













