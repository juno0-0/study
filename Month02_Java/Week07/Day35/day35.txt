스트림
 - 외부 반복자 : 개발자가 코드로 직접 컬렉션의 요소를 
                     반복해서 가져오는 코드 패턴
 - 내부 반복자 : 컬렉션 내부에서 요소들을 반복시키고 
                     개발자는 요소당 처리해야할 코드만 제공하는 코드 패턴
 - 내부 반복자의 장점
   · 내부에서 어떻게 요소를 반복시킬 것인가는 컬렉션에게 맡겨두고
     개발자는 요소 처리 코드만 집중할 수 있음
   · 내부 반복자는 요소들의 반복 순서를 변경하거나 멀티 코어 CPU를 최대한
     활용하기 위해 요소들을 분배시켜 병렬 작업을 할 수 있게 도와 주기 때문에
     하나씩 처리하는 순차적 외부 반복자보다 효율적으로 요소를 반복 시킬 수 있다.


컬렉션, 배열 - 집합
--> 오리지널 스트림 1번
--> 중간 처리 0~n번
--> 최종 처리 1번

 - 스트림은 컬렉션의 요소에 대해 중간 처리와 최종 처리를 할 수 있다.
   · 중간 처리 : 매핑, 필터링, 정렬을 수행
     최종 처리 : 반복, 카운팅, 평균, 총합 등의 집계 처리를 수행
 ex) 학생의 객체를 뽑아서 학생의 개별 점수를 뽑아낸다
      (중간처리, Student 객체를 점수(Integer)로 매핑)
      점수의 평균값을 산출
      (최종처리, 집계)

 - 메소드
 컬렉션,배열,int범위,long범위,디렉토리,파일,랜덤 수를 스트림타입으로 바꾸는 메소드들이 있다.

IntStream is = new Random().ints(40);//Random.ints() 아님
is.forEach(a->System.out.println(a));
		
System.out.println();
		
LongStream ls = new Random().longs(10);
ls.forEach(a->System.out.println(a));
		
System.out.println();
		
DoubleStream ds = new Random().doubles(3);//매개변수를 주면 매개변수의 수만큼 반복
ds.forEach(a->System.out.println(a));

스트림 중간처리
 - 스트림 파이프 라인
   · 대량의 데이터를 가공해서 축소하는 것을 일반적으로 리덕션이라고 함.
   · 데이터의 합계, 평균값, 카운팅, 최대값, 최소값등이 
     대표적인 리덕션의 결과물이라고 볼 수 있다.
   · 컬렉션의 요소를 리덕션의 결과물로 바로 집계할 수 없을 경우에는
     집계하기 좋도록 필터링, 매핑, 정렬, 그룹핑 등의 중간 처리가 필요함.
     (중간처리가 없어도 상관없음)

완성이 되야 스트림 소스에서 출발하는 것

   · 파이프라인
     - 스트림은 데이터의 필터링, 매핑, 정렬, 그룹핑 등의 중간처리
     - 합계, 평균 카운팅, 최대값, 최소값 등의 최종 처리를 파이프라인으로 해결
     - 파이프라인 : 여러개의 스트림이 연결되어 있는 구조

   · 중간 처리는 최종 처리가 시작되기까지 지연된다.
     - 중간 스트림이 생성될 때 요소들이 바로 중간 처리 되는 것이 아니라
        최종 처리가 시작 되기 전까지 중간 처리는 지연된다.
     - 최종 처리가 시작되면 비로소 
        컬렉션의 요소가 하나씩 중간 스트림에서 처리되고 최종 처리까지 오게 된다.

   · Stream 인터페이스에서는 필터링, 매핑, 정렬 등의 많은 중간 처리 메소드가 있는데
     이 메소드들은 중간 처리된 스트림을 리턴
     그리고 이 스트림에서 중간 처리 메소드를 호출해서 파이프라인을 형성


스트림이라면 중간 처리 메소드이고, 
기본 타입이거나 OptionalXXX라면 최종 처리 메소드이다.

 - 필터링
   · 필터링은 중간 처리 기능으로 요소를 걸러 내는 역할
   · distinct()
     - 중복을 제거하는데 Stream의 경우 Object.equals(Object)가 true면
        동일한 객체로 판단하고 중복을 제거
     - IntStream, LongStream, DOubleStream은 동일값일 경우 중복을 제거

 - 매핑
   · 매핑은 중간처리 기능으로 스트림의 요소를 다른 요소로 대체하는 작업
   · flatXXX(), mapXXX(), asDoubleStream(), asLongStream(), boxed()가 있다
   · T가 들어가면 Stream 타입으로 나옴
     - flatXXX() : 
     - mapXXX() : 대체되는 것