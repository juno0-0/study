andThen()과 compose() default 메소드
 - default 메소드나 정적 메소드는 추상 메소드가 아니기 때문에
   함수적 인터페이스에 선언되어도 함수적 인터페이스의 성질을 잃지 않음
 - consumer, Function, Operator 종류의 
   함수적 인터페이스는 andThen(), compose() 디폴트 메소드를 가지고 있다.
 - 두개의 하수적 인터페이스를 순차적으로 연결,
   첫번째 처리 결과를 두번째 매개값으로 제공해서 최종 결과 값을 얻을 때 사용
 - andThen()
   · 인터페이스AB = 인터페이스A.andThen(인터페이스B);
     최종결과 = 인터페이스AB.method();
   · 인터페이스AB method() --> 인터페이스A(람다식) --> andThen()
     --> 인터페이스B(람다식) --> 최종결과
     인터페이스 AB의 method()를 호출하면 우선 인터페이스 A부터 처리하고
     결과를 인터페이스B의 매개값으로 제공
     인터페이스B는 제공받은 매개값을 가지고 처리한 후 최종 결과를 리턴
 - compost()
   · 인터페이스AB = 인터페이스A.compose(인터페이스B);
     최종결과 = 인터페이스AB.method();
   · 인터페이스AB method() --> 인터페이스B(람다식) --> compose()
     --> 인터페이스A(람다식) --> 최종결과
   · 인터페이스 AB의 method() 호출하면 우선 인터페이스 B부터 처리하고
     결과를 인터페이스 A의 매개값으로 제공
     인터페이스A는 제공 받은 매개값을 가지고 처리한 후 최종 결과를 리턴
 ※ andThen()은 다 가지고 있지만 compose()는 Function<T,R>, DoubleUnaryOPerator,
    IntUnaryOperator, LongUnaryOperator만 가지고 있음

and(), or, negate() 디폴트 메소드와 isEqual() 정적 메소드
 - and()
   ·  

 - isEqual()
   · test() 매개값인 sourceObject와 isEqual()의 매개값인 targetObject를 Objects 클래스의
     equals() 매개값으로 제공

minBy(), maxBy() 정적 메소드
 - BinaryOperator<T>에 제공

메소드 참조
 - 메소드를 참조해서 매개변수의 정보 및 리턴 타입을 알아내서,
   람다식에서 불필요한 매개 변수를 제거하는 것이 목적
 - 람다식은 종종 기본 메소드를 단순히 호출만 하는 경우가 많음
 - 두개 값을 받아 큰수를 리턴하는 Math 클래스의 max() 정적 메소드를 호출하는 람다식 표현
   (left, right) -> Math.max(left, right);
   = 람다식은 단순히 두개의 값을 Math.max() 메소드의 매개값으로 전달하는 역할만
      하기 때문에 아래와 같이 메소드 참조를 이용해서 더 깔끔하게 간략화 할 수 있음
      Math::max;
      메소드 참조도 람다식과 마찬가지로 인터페이스의 익명 구현 객체로 생성되므로
      타겟 타입인 인터페이스의 추상 메소드가 어떤 매개 변수를 가지고 리턴 타입이 
      무엇인가에 따라 달라진다.
      IntBinaryOperator 인터페이스는 두 개의 int 매개값을 받아 int값을 리턴하므로 Math::max 메소드 참조를 대입
      IntBinaryOperator operator = Math::max; 
			       (left, right) -> Math.max(left, right);

정적 메소드와 인스턴스 메소드 참조
 - 정적메소드 참조 
   클래스이름::메소드
 - 인스턴스메소드 참조
   참조변수::메소드

매개 변수의 메소드 참조
 - 메소드는 람다식 외부의 클래스 멤버일 수 있고,
   람다식에서 제공되는 매개변수의 멤버일 수도 있다.

생성자 참조
 - 메소드 참조는 생성자 참조도 포함
 - 생성자 참조는 객체 생성을 의미한다.
   단순히 메소드 호출로 구성된 람다식을 메소드 참조로 대치할 수 있는 것처럼
   단순히 객체를 생성하고 리턴하도록 구성된 람다식은 생성자 참조로 대치할 수 있다.
   


람다식에서 ()는 매개변수 {}는 추상메소드 재정의(내용이 들어간 것)



스트림 = 액체처럼 흘러가는 자료
 - 컬렉션의 저장요소를 하나씩 참조해서 람다식으로 처리할 수 있도록 해 주는 반복자
 - 반복자 스트림
   · Iterator를 이용한 반복자 모습
     iter.hasNext()와 iter.next() 쓰는거

 - Stream을 사용하는 예
   · List<String> list = Arrays.asList("홍길동","정현희","김자바");
     Stream<String> stream = list.stream();
     stram.forEach(name -> syso(name));
   · forEach() : Consumer 함수적 인터페이스 타입의 매개값을 가지므로
                  컬렉션의 요소를 소비할 코드를 람다식으로 표현할 수 있다.

 - 특징
   · Stream은 Iterator와 비슷한 역할을 하는 반복자이지만,
     람다식으로 요소 처리 코드를 제공하는 점과
     내부 반복자를 사용하므로 병렬 처리가 쉽다는 점

 - 내부반복자와 외부 반복자
   · 내부 반복자는 개발자코드가 처리코드를 제공하면 컬렉션에서 한번에 처리
   · 외부 반복자는 개발자코드에서 next()를 보내면 컬렉션에서 자료를 찾고
     다시 개발자코드로 자료를 가져와서 개발자코드에서 처리하는 것을 반복

※ Stream은 컬렉션의 인터페이스라서 List가 쓸 수 있음