ArrayList는 추가, 수정은 좋지만
삽입, 삭제는 뒤의 인덱스들을 전부 옮겨야 해서 
효율성이 떨어진다. (권장하지 않음)

 - contains() : ArrayList에 매개값이 있는지 true/false로 리턴
 - toArray() : ArrayList를 배열로 리턴한다.
                 매개값에 new 타입[ArrayList참조변수.size()]
 - Arrays.asList() : 같은 타입의 고정된 객체들을 사이즈가 고정된 ArrayList로 만드는 것
	           = 사이즈가 고정되어 있는데 add()를 사용하면 에러 발생
		  remove()도 크기가 줄어들기 때문에 에러 발생
		  set()은 가능
		String[] test = {"1","2","3"};
		List<String> a = Arrays.asList(test);
		혹은
		List<String> a = Arrays.asList("1","2","3");

 - List에 담아서 사용하는 것, add() 가능
   · List 참조변수 = new ArrayList(Arrays.asList(배열명or같은 타입의 자료들));

 - clear() : ArrayList의 값을 모두 삭제
 - isEmpty() : ArrayList가 비어있으면 true, 값이 있으면 false 리턴
	     조건문에 조건으로 사용

 ※ 메소드 앞에 is나 has가 붙으면 boolean 타입으로 리턴

 - addAll() : 두 컬렉션을 합침
	    합치고 나서 add()도 가능하다.

 - containsAll() : 컬렉션의 모든 값이 포함되어 있는지 true/false로 리턴
	          ex) a.containsAll(b)
		   a안에 b가 가지고 있는 값이 모두 있습니까?
		   b가 a에 포함됩니까?

 - ArrayList의 참조변수를 출력하면 toString()이 재정의되서
  참조변수가 가지고 있는 값을 [ , , ]로 리턴

 - retainAll() : 공통적인 값을 제외하고 나머지를 다 지운다.
	      ex) a.retainAll(b);
	           a에서 b가 가진 값을 제외하고 나머지를 지운다.
	           a와 b의 교집합을 제외한 값을 지운다.

 - removeAll() : retainAll()과 반대
	        공통으로 가진 값을 다 지운다.
	        ex) a.removeAll(b);
	             a와 b가 공통으로 가진 값을 지운다.

 ※ 제네릭을 비워두면 ArrayList에 모든 타입을 넣을 수 있다.
     제네릭에 Integer를 넣고 String을 넣으면 오류 남
 ※ ? : 임의


Vector
 - ArrayList와 동일한 내부 구조를 가지고 있다.
 - 기본 크기는 10, 자동으로 늘어난다.
 - 동기화 처리가 가능하다.★★★
   Thread를 배열에 담을 때 Vector 사용.(멀티 스레드를 처리할 때)
 - 동기화 처리 : 여러 곳에서 동시에 하나의 작업을 처리할 때 문제없이 동작하도록 하는 기능
 - 멀티스레드 환경에서 안전하게 객체를 추가, 삭제할 수 있도록 이용

 - iterator() : 반복자
	     hasNext()와 next()를 사용할 수 있다.
	     hasNext() : 값이 없을 때까지 반복
	     next() : 순서대로 값을 준다.
	     (hasNext()가 조건으로 들어가고 next()가 값을 하나씩 비워서 
                  값이 없으면 hasNext()가 false를 리턴)
                 Iterator<Board> iter = list.iterator();
		while(iter.hasNext()) {//값이 있으면 true, 없으면 false
			Board board = iter.next();//값을 board에 하나씩 준다.
			System.out.println(board);//각 객체의 주소가 출력된다.
		}
 - capacity() : Vector에 있는 메소드
	      현재 배열의 크기를 리턴
 - size() : 배열에 저장된 값의 갯수를 리턴
 - trimToSize() : 배열에 저장된 값의 갯수만큼 전체 크기를 줄임
	         줄인 후 객체를 추가하면 줄어든 크기가 다시 늘어난다.

LinkedList
 - ArrayList와 사용 방법은 똑같지만 내부 구조는 완전히 다르다.
 - 각 객체는 값과 앞, 뒤 객체의 주소를 가지고 있다.
 - 객체 삽입과 삭제가 빈번하게 일어나면 LinkedList를 사용한다.★★★
   삽입, 삭제가 되면 앞뒤 링크만 변경
   (ArrayList는 뒤 전체가 변경)
 - 추가, 삽입 전부 ArrayList보다 빠르다.
 - addFirst(), push() : 맨 앞에 매개값을 넣는다.
	               add(0, 매개값)과 같다.
 - addLast() : 맨 뒤에 매개값을 넣는다.
 - offer() : add()와 같지만 리턴 타입이 boolean
              값이 들어갈 수 있으면 true, 아니면 false를 리턴

 - element() / getFirst() / peek() / peekFirst()
    : 맨 처음에 있는 값을 리턴(0번)
 - getLast() / peekLast()
    : 맨 마지막에 있는 값을 리턴
 - poll() / pollFisrt() / pop()
    : 맨 처음 값을 추출 후 삭제 
 - pollLast()
    : 맨 마지막 값을 추출 후 삭제
 - removeFirst()
    : 맨 처음 값을 삭제
      remove(0)과 같다
 - removeLast()
    : 맨 마지막 값을 삭제
 - removeFirstOccurrence()
    : 맨 처음부터 검색해서 삭제
 -  removeLastOccurrence() 
    : 맨 마지막부터 검색해서 삭제

멀티 스레드를 할 경우 Vector
뭔가 찾는 과정이 많을 때 ArrayList
삽입, 삭제도 할 경우 LinkedList
 
