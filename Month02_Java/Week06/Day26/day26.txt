동기화 블록, 동기화 메소드는 
인스턴스 메소드나 정적 메소드 아무 곳이나 쓸 수 있다.
스레드 2개가 동시에 호출하는 경우
일반 메소드는 같이 사용하지만
동기화 메소드나 동기화 블록은 하나가 사용하는 동안 다른 하나는 대기한다.
-----------------------------------------------------
데몬 스레드
 - 주 스레드의 작업을 보조하는 역할
 - 주 스레드가 종료되면 데몬 스레드는 강제적으로 자동 종료
    ex) 워드의 자동 저장기능, 워드가 종료되면 자동 저장기능도 자동 종료되는 것
 - thread객체.setDaemon(true);
 - 주의점 : start()로 호출되기 전에 setDaemon(true)를 호출해야 한다.
              아니면 IllegalThreadStateException 발생

스레드 그룹
 - 패키지 개념으로 생각하자(관련된 스레드를 묶어서 관리)
 - JVM이 실행되면 system스레드 그룹을 만든다.
 - JVM 운영에 필요한 스레드를 생성해서 system 스레드 그룹에 포함시킨다.
 - system 하위 스레드 그룹으로 main을 만들고 메인 스레드를 main스레드 그룹에 포함시킨다.
 - 스레드는 반드시 하나의 스레드 그룹에 포함되어야 한다.
 - 만약 명시적으로 스레드 그룹을 지정하지 않으면 스레드를 생성한 클래스와 같은 그룹으로 지정된다.
    (main에서 start() 했기 때문에 main스레드 그룹에 들어감)

스레드 그룹 이름 알기
 - 현재 스레드가 속한 스레드 그룹의 이름 알기
   ThreadGroup group = Thread.currentThread().getThreadGroup();
   String groupName = group.getName();
 - 프로세스 내에서 실행하는 모든 스레드에 대한 정보 알기
   Map<Thread, StackTraceElement[]> map = Thread.getAllStackTrace();
 - 스레드 그룹 이름 바꾸기
   ThreadGroup movieGrp= new ThreadGroup("Movie");
   Thread th1 = new Thread(movieGrp,video);

 - isDaemon() : 데몬이니?

그냥 두면 주 스레드 setDaemon하면 데몬 스레드






Map<Key와 Value>로 이루어짐
      only 와 중복 가능

자료 처리 구조
1. List
2. Set : 순서 지정 안됨, 중복 허용 안됨
3. Map

-------------------------------------------------------------------------------------------
자료구조
자료 = 데이터
데이터량 분류(많다, 적다)
데이터 사용용도(저장용, 검색용, 업데이트용)
데이터 내용 분류(필드 갯수)

경우의 수) 데이터가 많고 저장용이다 -> 백업파일 순차처리
	  데이터가 적고 검색용이다 -> 순차처리
	  데이터가 많고 검색용이다 -> 정렬, 이분검색
	  업데이트(삭제, 삽입, 수정)용 -> LinkedList, Tree

컬렉션 공부할 때 포인트는
각 컬렉션마다 장단점을 알고 상황에 맞게 선택해서 사용하는 것
(명령어 공부가 메인이 아님)

Stack구조 = 메소드영역의 구조같은 것
1,2,3이 들어오면 3,2,1순으로 나간다.
마지막에 입력된 것부터 출력된다.
Last In First Out
후입선출
집어 넣는 것은 push
빼는 것은 pop

큐구조
1,2,3이 들어오면 1,2,3 순으로 나간다.
들어간 순서대로 출력된다.
First In First Out
선입선출

데큐구조

링크드리스트 구조
주소를 1개만 가지고 있는 것은 단일링크
주소를 2개 가지고 있는 것은 이중링크(한쪽 주소는 다음꺼의 주소를 기억한다.)
(null)A(20) (20)B(30) (30)C(null)
     (10)       (20)        (30)
여기서 B를 삭제하고 싶으면
A가 가진 (20)을 (30)으로 바꾸고
C가 가진(20)을 (10)으로 바꾼다.
B와 C 사이에 D를 넣고 싶으면
(20)B(200)	(200)D(30)		(30)C(null)
		   (200)

트리구조
노드 : 동그라미 모양, 항목, 자료
디그리 : 가지 모양, 관계
~진 트리(2진 트리, 3진 트리, ...)
전체 트리에서 가장 많은 가지수를 쓴다
ex) 제일 많은 가지가 5개면 5진 트리
근노드(root node) : 맨 위에 있는 노드
단노드(terminal node) : 디그리가 없는 트리
		      제일 마지막에 달려 있는 노드, 자식이 없는 노드
간노드(non-terminal node) : 근노드와 단노드 둘 다 아니면 간노드 
레벨(층) : 몇층으로 되어 있는가
컴퓨터에서 프로그램적으로 쓰고 있는 트리 = 2진 트리 
   3진(다진) 트리         -->       2진트리로 고치기
(일상에서 쓰는 자료)	   
첫번째 디그리만 놔두고 나머진 짜른다음 서로 연결연결
1번에 2,3,4번이 있고
2번에 5,6번
4번에 7번이 있으면
1번에 2번만 연결하고 3,4번을 자른다음
2번에 3번, 3번에 4번을 연결
2번에 5번만 연결하고 6번을 자른다음
5번에 6번을 연결
= 3진 트리

그럼 1번에 2번
2번에 3,5
3번에 4
4번에 7
5번에 6
= 2진 트리

그래프구조 : 트리와 순환하는 구조

트리구조 처리(읽는 순서, 쓰는 순서, 검색하는 순서)하는 방식
이용분야 : 정렬, 연산처리, 연산기 등에서 사용함

        A
      /   ＼
     B     C
1) 중위오더(Left-Root-Right)
  B - A - C 순서
2) 전위오더(Root-Left-Right)
  A - B - C 순서
3) 후위오더(Left-Right-Root)
  B - C - A 순서

           A
         /   ＼
      B        C
    /  ＼     /  ＼
   D    E   F      G
	/	   
          H
중위일 때 D B E A H F C G
전위일 때 A B D E C F H G
후위일 때 D E B H F G C A

컬렉션이란?
 - 사전적인 의미로 요소를 수집해서 저장하는 것
자바에서 컬렉션이란?
 - 객체를 수집해서 저장하는 역할을 하는 것
 - 넣기만 하면 다양한 메소드로 정렬, 검색, 확인, 변경, 추가, 삭제가 가능
프레임워크란?
 - 사용 방법을 미리 정해 놓은 라이브러리(API)

컬렉션

리스트 		셋 	맵
어레이 리스트	해쉬셋	해쉬맵
벡터		트리셋	해쉬테이블
링크드리스트		트리맵
			프로퍼티스

List계열
 - 순서를 유지하고 저장 (A,B,C push C,B,A pop)
 - 중복 저장 가능

Set계열
 - 순서를 유지하지 않고 저장
 - 중복 저장 불가능

Map계열
 - 키와 값이 쌍으로 저장
 - 키는 중복 저장 불가능


List
 - List 컬렉션은 객체 자체를 저장하는 것이 아니라 객체의 번지를 참조
 - 동일한 객체를 중복 저장할 수 있는데 
   사실은 동일한 주소가 중복으로 들어가는 것

ArrayList
 - 데이터량이 많을 때는 불편하다.
 - 추가할 경우 효율성이 높다.(순서대로 뒤에 추가되는 것)
 - 중간 인덱스에 삽입, 삭제를 많이 할 때는 비효율 적
    (하나가 들어가거나 빠지면 나머지 인덱스가 모두 자리를 이동해야 함)
 - add() : 매개값을 ArrayList에 넣는 것
             매개값으로 객체를 주거나 기본형 값을 준다.
	 순서대로 들어간다.
   add(index, 객체)하면 index번째 자리에 객체를 넣고 나머지는 한칸씩 뒤로 밀린다.
   (권장하지 않음)
 - size() : ArrayList의 전체 크기
 - set(index, 객체) : index번째 값을 객체로 바꾸기
 - get(index) : index에 있는 값을 리턴 
 - 보통 하나의 ArrayList 안에는 하나의 자료형만 넣는다.
 - indexOf("") : ""의 index를 리턴, 없으면 -1 리턴, 중복된 값이 있으면 처음에 입력한 값을 리턴
   lastIndexOf("") : ""의 index를 리턴, 없으면 -1 리턴, 중복된 값이 있으면 마지막에 입력한 값을 리턴















