복습
B를 A만 쓸 경우 상속이 아니라
B를 A의 멤버로 만들어버린다.
(상속도 포함도 아님)
클래스 안에 클래스, 혹은
클래스 안에 인터페이스를 넣는다

장점
내부클래스에서 외부클래스의 
멤버들을 쉽게 접근할 수 있다
코드의 복잡성을 줄일 수 있다
-----------------------------------------------------
· 인스턴스 멤버 클래스
 인스턴스 필드, 메소드만 선언가능
 아무런 제약 없이 내부클래스가 
  외부클래스의 멤버를 사용할 수 있다.
  반대로 외부클래스가 
  내부클래스의 멤버를 사용할 수 없다.

· 정적 멤버 클래스
 전부 선언 가능
 내부클래스에서 외부클래스의 멤버를 
  사용할 때 static이 붙은 것만 
  사용할 수 있다.
 외부클래스에서 내부클래스의 멤버를 
  사용할 때 static이 붙은 것만 
  클래스명으로 접근할 수 있다.
 내부클래스명.멤버;

· 로컬(지역) 멤버 클래스
 메소드 안에 클래스를 넣는다.
  = 메소드가 동작할 때만 
     클래스를 사용할 수 있다.
 인스턴스 멤버와 메소드만 선언 가능
 멤버 선언은 내부클래스 안에 하고 
  객체화와 실행코드는 
  클래스가 선언된 메소드 안에 작성.
 외부클래스의 인스턴스 필드는 
  내부클래스 안에서 변경이 가능하지만
  내부클래스가 속해있는 메소드에서 
  선언된 필드는 자동으로 final이 붙어서 
  변경이 안되고 사용만 가능하다.
  (익명객체 로컬변수 사용에서 설명)

· 인스턴스 멤버 클래스 객체화
 내부클래스의 멤버들은 외부클래스의 
  참조변수로 접근 못한다.
 외부클래스를 객체화하면 
  외부만 힙영역에 올라간다.
 내부클래스 객체화하기
  외부클래스.내부클래스 참조변수
  = 외부참조변수.new 내부생성자();
  B b1 = new B();
  A.B b2 = b1.new B();

· 정적 멤버 클래스 객체화
 내부클래스가 static이라서 
  외부클래스명으로 접근할 수 있다.
  OutterStatic.InnerStatic ois 
  = new OutterStatic.InnerStatic();
  단, import하면 바로 InnerStatic is 
  = new InnerStatic();로 바로 가능하다.
  내부클래스에 있는 정적멤버만 사용할꺼면 
  외부클래스.내부클래스.멤버로 바로 접근 가능
  외부클래스를 객체화해서 참조변수로 
  정적멤버에 접근할 수 있지만 
  경고(노란줄)가 뜸
  A.C.필드명 = 3;
  이렇게 바로 사용도 가능.

· 로컬 멤버 클래스 객체화
 클래스가 선언된 메소드 안에서 객체화를 한다.
 외부클래스로 메소드를 호출하면 사용할 수 있다.

bin폴더에 Inner.class가 생긴다.

- this
 외부클래스와 내부클래스에 같은 이름의
 멤버가 존재하는 경우 this로 
 어느 클래스의 인스턴스 멤버를 
 가르키는지 알려준다.
 내부클래스에서 내부클래스의 멤버를 
 부를 때 그냥 부른다.
 내부클래스에서 외부클래스의 멤버를 부를 때
 외부클래스명.this.멤버명;
 
· 클래스 안에 인터페이스를 만든 경우
 인터페이스는 클래스에 선언된
 static 멤버만 사용할 수 있다.
 외부클래스의 메소드 안에 new 인터페이스명(){};
 해서 익명클래스를 만들어놓고 사용한다.
 (???)


· 객체화 
 Person person = new Person();

· 다형성
 Person person2 = new Student();

· 익명클래스★★★★★
 Person person3 = new Student(){ };
  (생성자 뒤에 { };가 있으면 익명클래스)

익명클래스
 선언과 객체의 생성을 동시에 하기 때문에 
  단 한번만 사용할 수 있고 오직 하나의 
  객체만을 생성할 수 있는 일회용 클래스
· 구조
 이게 하나의 클래스인데 클래스 이름이 없음
  new 부모클래스(인터페이스)이름(){
	//멤버 선언	
  };

익명객체(★★★★★)
 엄청 많이 쓴다.
 이름이 없는 객체를 말한다.
 꾸준히 자식 혹은 구현객체를 사용하는게 아니라
  일회용으로 한번만 쓸 경우 익명객체를 쓴다.
· 구조
 부모클래스 변수 = new 부모클래스(매개값, ...){
	//필드
	//메소드
  } 
· 이용 (~의 자식(구현) 객체처럼 이름이 없는 것)
 1. 익명자식 객체 생성 (자식이름이 없는 것)
 2. 익명 구현 객체 생성(구현객체의 이름이 없는 것)
    (구현객체란 인터페이스 밑에 있는 것
     implements 받은 것)
 3. 익명 객체의 로컬 변수 사용

· 익명 구현 객체 생성
 인터페이스 참조변수 = new 인터페이스(){
	재정의{ }
  };
  참조변수.멤버;

  인터페이스를 new하고 { }; 
  후에 참조변수.멤버
  구현객체를 생략하고 바로 재정의

인터페이스 A
(추상메소드)
     ↓
구현클래스 B
(오버라이딩)
     ↓
메인클래스 객체화
    (사용)
A a = new B();

      ↓(익명)

인터페이스 A
     ↓
메인클래스 객체화
A a = new A(){ };
(implements 받은 클래스가 없다.)
구현클래스를 익명객체(익명클래스)로
바로 오버라이딩      
= 2번째 단계를 생략한 것

인터페이스() 뒤에 { };안에 있는 것이 
이름이 없는 클래스(익명객체)
클래스라서 { };안에 인스턴스 멤버를 
선언할 수 있지만
static은 선언할 수 없다.
왜냐하면 static은 클래스명으로 접근하는데 
이름 자체가 없기 때문에.
{ };도 이름이 없는 내부클래스라서 변수를 
선언하면 전역변수로 취급되어 이름이 파란색
익명클래스({ };) 밖에서 선언한 멤버는 
익명클래스에서 사용은 가능하나 수정은 불가능
{ }안에 선언한 인스턴스 멤버는 
{ };안에서만 사용할 수 있다.
(외부에서 사용할 수 없다.)
Down-casting으로 접근하려 해도 
이름이 없어서 불가능
(불러서 일을 시키려고 해도 
이름이 없어서 못부르니까 일도 못시킴)


- 익명 자식 객체 생성
부모추상클래스  A
      ↓
자식클래스 B
      ↓
메인클래스 자식 객체화
(A a = new B();)

      ↓(익명)
	
부모추상클래스 --> A
      ↓	 		
메인클래스 자식 객체화 
(extends 받은 클래스가 없다.)
A a = new A(){ };
{ }; 안에 있는게 A의 자식
이름을 사용하지 않고 
익명 자식객체로 사용

클래스와 인터페이스 둘 다 구조는 똑같다.

다른 애들은 { }뒤에 ";"이 없다.
익명클래스의 { };는 뒤에 ";"이 있다.
{ };면 익명객체★★★★★

- 익명객체 로컬변수 사용
   { };는 익명 내부클래스라서 외부의 변수를 
   사용할 수 있지만 수정은 할 수 없다.
   왜냐하면 다른 메소드의 매개변수나 
   로컬변수가 (main도 메소드)
   내부클래스에 들어올 때 
   매개변수나 로컬변수의 복사본이 들어가고
   거기에 final이 자동으로 붙기 때문에.
   예를 들어 int a=5;라는 변수가 밖에서는 
   final이 아니라서 변경도 가능하지만
   익명클래스에서 호출을 하면 
   final이 자동으로 붙는다.
   이때 int a가 가는게 아니라 int a를 
   복사한 복사본이 가는 것.
   (= 복사본 int a에 final이 붙는 것)
   그래서 원본을 수정을 하면 
   복사본은 수정이 되지 않았기 때문에 
   사용하는 부분인 복사본에 오류가 발생하는 것
   (Java 1.7버젼까지는 final을 
    적어주지 않으면 오류가 발생했었음)
