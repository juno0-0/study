복습
메서드 오버로딩
	- 같은 이름의 메서드를 여러개 생성하는 것.
	- 매개변수의 갯수, 순서, 타입이 달라야 한다.
---------------------------------------------------------
ArrayEx01.java	->	ArrayEx01.class	->	Link     ->     Loader	->	실행
	         컴파일          (binary file)	            (Link+Loader = Buile)		 Run

Loader에서 static이 붙은 멤버(클래스멤버)들을 자동으로 Method메모리에 올려준다.
Run에서 new를 쓰고 객체화를 하면 인스턴스 멤버들이(static이 붙지 않은 멤버들) Heap메모리에 올라감
클래스 멤버(필드, 메서드)는 인스턴스 멤버(필드, 메서드)를 사용할 수 없다.	
인스턴스 멤버는 다 사용이 가능하다. (= static이 메모리에 올라갈 때 인스턴스는 아직 메모리에 없기 때문에)


static이 붙은 멤버는 Loader 단계에서 딱 한번 올라간다.
static이 붙은 멤버는 한번 올라가면 프로그램 종료될 때까지 메서드 영역에 올라가있다.

static은 공통으로 써야할 때 붙힌다 = 모든 객체들이 공통된 값을 공유한다.
(같은 클래스에서 다른 객체끼리 공통으로 써야하는 변수나 메서드에 붙힌다.)

임시로 쓰고 버릴 변수는 Heap영역
끝까지 가고 공통으로 쓰는 변수는 static영역

- new해서 써야하는 것 = 인스턴스 멤버 (Heap 영역) 
   = 객체명.인스턴스변수 = 객체로 클래스에 접근

- new하지 않아도 쓸 수 있는 것 = static 멤버 (Method 영역) 
   = 클래스명.static변수 (객체화를 할 필요가 없다.) = 클래스에 직접 접근
	(static 멤버는 힙 영역이 아니라 메서드 영역에 있어서 올라가있는 것을 쓰려면 stack 영역에서 호출해서 쓴다.)

* static이 붙은 변수도 객체명.static변수 해도 오류는 안나지만 사용하지 않는다. 

결론 
   static은 로더에서 올라가고 Instance는 실행에서 new를 했을 때 올라가기 때문에
   Instance는 다 쓸 수 있고 static은 static만 쓸 수 있다.
   (static이 메모리에 올라갈 때 Instance는 메모리에 올라가지 않기 때문에 오류)

사용
- 클래스멤버는 클래스명.클래스변수명으로 접근(클래스로 직접 접근)
- 인스턴스멤버는 객체화(new)를 하고 객체.인스턴스변수명으로 접근(객체를 통해서 클래스로 접근)

class 클래스명{
	
	void 메서드명(){
		내용;
	}			이 코드에서 오류가 나는 이유는 
				main도 static이 붙어 있어서 로더단계에서 메모리에 올라가는데
	main(){			메서드명();은 아직 메모리에 올라가지 않은 상태에서 호출되었기 때문에 오류 발생
		메서드명(); 	(해결 : 메서드에 static을 붙혀주거나 객체화를 한 뒤 사용한다.)
	}	
}		

static 변수를 선언하면 메서드영역에 올라감
ex) static int a;
static 변수를 초기화하면 스택영역에 올라감
ex) a = 100;
static 변수를 선언하면서 초기화하면 메서드에 올리고 스택영역으로 감

스택영역에 있는 메모리(지역변수)는 "}"를 만나면 스택영역에서 사라진다.
전역변수 : static변수(Method영역)와 Instance변수(Heap영역)


public static void main(String[] args) {	
	final int publicVar = 100; 				main()에도 static이 붙어있다			
}							static void sum() 메서드에서 publicVar이라는 변수를 사용하려면
							변수를 전역변수로 선언해줘야 한다.
							public blicVar은 지역변수이기 때문에 main()이 메모리에서 사라진다.
static void sum() {						static int publicVar = 100;으로 써도 오류가 나는데 
		System.out.println(publicVar);		이유는 publicVar은 main()에서 선언한 지역변수인데
							지역변수는 "}"를 만나면 사라져야 하지만 static이라 사라질 수 없는 성질과 						
							충돌을 일으켜서 오류가 발생하는 것.
							* 결론은 지역변수는 static을 쓰면 오류가 발생한다.
}



class Order{
     public Order(){
	syso("기본 생성자");
     }

     {
	syso("인스턴스 블록");	
     }

     static{
	syso("클래스 블록");	
     }

class OrderEx{
     main(){
	Order o = new Order();
	Order o1 = new Order();
     }
}
- 기본 생성자와 인스턴스 블록만 만들었을 때
	new해서 힙메모리에 올라가고 생성자가 힙메모리에 생긴 공간을 채운 뒤에 기본 생성자를 호출한 것. 
	(힙메모리에는 모든 인스턴스 멤버가 올라가기 때문에 인스턴스 블록이 생성자보다 먼저 출력되는 것)

- 기본 생성자와 인스턴스 블록, 클래스 블록을 만들었을 때
	static이 메모리에 가장 먼저 메모리에 올라가기 때문에 클래스블록 -> 인스턴스 블록 -> 기본 생성자 순으로 출력된다.
   	객체가 2개일 때(new를 2번) 인스턴스 블록과 기본 생성자는 새로운 힙영역 올라가고 2개가 출력이 되지만
	static은 메모리에 딱 1번만 올라가기 때문에 1번만 출력된다.

- 생성자를 쓰는 이유
   실행하자마자 자동으로 무언가를 하고 싶을 때 사용한다.


- 인스턴스 블록을 쓰는 이유
	생성자가 호출되고 한번에 여러 기능을 수행해야할 때 사용한다.(일을 분업하는 것)
	=실행속도가 빨라진다, 가독성이 좋아진다, 관리가 수월해진다.
	메서드처럼 호출을 할 수 없고 객체화를 하면 생성자 앞에 자동으로 실행되는 것.
	
- 클래스(static) 블록을 쓰는 이유
	프로그램이 실행되자마자 제일 처음으로 모든 객체에서 1번만 실행되야 하는 코드나 변수, 메서드는 
   	static블록(클래스블록)에 넣으면 가장 먼저 실행된다.
	(ex : 정수기회사면 "안녕하세요 코웨이입니다." 라고 넣으면 어떤 객체를 만들어도 저 문구가 나옴.)
   	프로그램이 종료되야 사라진다.

* 인스턴스 블록과 클래스 블록은 여러개 만들 수 있다.
   처리되는 순서는 위에서부터 순서대로 처리한다.

정리 
* 실행 순서 
	클래스블록(static)
	인스턴스블록
	생성자
	호출한 메서드

- 클래스가 메모리에 로딩될 때 순서
   클래스 초기화 블록 static {  } -> main( ) -> 인스턴스 초기화 블록 {  } -> 생성자 
			        객체화

- 멤버변수의 초기화 시기
	클래스 변수(static int a)의 초기화 시점  :  클래스가 처음 로딩될 때 단 한번 초기화 된다.
	인스턴스 변수(int a)의 초기화 시점 : 인스턴스가 생성될 때마다 각 인스턴스별로 초기화가 이루어진다.
					= new를 만나면 초기화된다.
** 클래스변수는 항상 인스턴스 변수보다 항상 먼저 생성되고 초기화된다.

- 정적 메소드와 블록 선언시 주의점
  	객체가 없어도 실행된다는 특징 때문에 이들 내부에 인스턴스 필드나 인스턴스 메소드를 사용할 수 없다.
	this도 객체화를 하고 객체로 접근하는 것인데 객체가 없기 때문에 사용을 할 수 없다. 
	(객체를 통해 클래스에 접근할 때 this는 객체의 주소를 가지고 있고, 클래스의 인스턴스 변수를 가르키기 때문에(static은 인스턴스 변수를 사용할 수 없다.)

static이 붙은 곳에서는 this.를 사용 못함
= this는 인스턴스멤버를 가르키는 것인데 static은 클래스멤버를 의미하기 때문에

멤버변수 : 클래스에 선언
지역변수 : 메서드에 선언

멤버변수(전역변수)는 초기화를 하지 않아도 된다. =  자동초기화 된다.
지역변수는 초기화를 반드시 해야 한다. = 초기화하지 않으면 껍데기만 있음.

동작은 메서드 안에 있어야 한다.

final
	- 변수 선언시 final을 붙히면 최종값이라는 의미
	- 프로그램 실행 도중에 수정할 수 없다.
	ex) final String nation="USA";
	     지금 들어있는 USA가 이 변수의 최종값이라는 뜻, 고정값 캡슐화를 시킨다는 의미
	     nation="KOREA"; 할 수 없다.
	- 상수는 아님.
	- 다른 클래스에서 객체화해도 사용이 불가능하다.

	final 사용
		- final 객체 : final 클래스명 객체명 = new 생성자();를 하면 이 객체에 다른 참조 값을 지정할 수 없다.
						즉 한번 생성된 final 객체는 같은 타입으로 재생성이 불가능하다.
						(객체 내부의 멤버는 변경이 가능함.)

		- final 클래스 : final 클래스{}를 하면 이 클래스는 최종상태가 되어 상속이 불가능함.
			        필드는 setter를 써서 변경 가능하다.

		- final 메서드 : final 메서드(){}를 하면 상속받은 클래스에서 부모의 final 메서드를 재정의 할 수 없다.
			        상속은 해야 하지만 부모 클래스에서 수정하면 안되는 메서드가 있을 때 사용한다.

		- final 인자값 : 메서드(final String 변수){}를 하면 final 필드와 마찬가지로 final 인자값의 변경이 불가능하다.
			        잘 사용되지 않는다.

상수
	- 불변의 값
	- 관례상 상수는 전체를 대문자로 표기한다.
	- 자바에서는 final 필드를 상수라 부르지 않는다.
	- 다른 클래스에서 객체화해서 사용 가능
	- 상수선언은 static final 타입 이름 = 초기값;
	ex) A클래스에서도 상수가 필요하고 B클래스에서도 상수가 필요하면
	    static final 이름 = 상수값; 
	    A클래스에서만 상수가 필요한 경우
	    A클래스 안에서 final 이름 = 상수값; 
	- 사용하는 경우 클래스명.이름이나 객체화해서 객체명.이름으로 접근한다.

static이 붙은건 같은 패키지에 있는 클래스는 모두 사용 가능하다. = static 앞에 default가 생략되어 있어서, default : 같은 패키지만 접근 가능
(public을 붙히면 다른 패키지에서도 사용 가능하다.)

final과 static final의 값을 변경하려면 선언한 곳에서 변경한다.
final 이름 = 100; -> final 이름 = 200;
static final 이름 = 100; -> static final 이름 = 500;
