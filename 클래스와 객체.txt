절자지향 
	- 대표적인 언어 : C
	- 반죽, 발효, 굽기, 장식, 판매를 1명이 다 하는 것
객체지향
	- 대표적인 언어 : Java, Python
	- 그 전에 사용했던 기능(메서드)을 가져와서 사용할 수 있다.
	   ex)반죽, 발효, 굽기, 장식, 판매 하나하나를 다 클래스로 만들어서 
	   다시 사용할 때 불러오기만 하면 된다.

클래스
	- 객체를 만들기 위한 틀, 설계도
	- 클래스에 객체들의 공통적인 필드, 메서드를 정의한다.

객체 
	- 추상적인 개념을 실체화 시킨 것 (실제로 존재하는 물건)
	  


ex) 붕어빵틀을 그려보세요 -> 못그림 = 추상적인 것 = 클래스
     붕어빵을 그려보세요 -> 그림 = 실제로 있는 것 = 객체
     붕어빵틀(추상적인 것)같은 것을 클래스명으로 쓰고 클래스라 하고,
     붕어빵(실제로 있는 것) 같은 것을 객체라고 한다.

객체화
	- 추상적인 것을 실체화 하는걸 객체화한다고 함
	- 클래스로 객체를 만드는 것(틀로 물건을 찍어내는 것)
	- 클래스로 접근하지 않고 클래스 타입의 객체를 만들어서 그 객체로 접근한다.
	
구조체를 고도화 시킨 것이 클래스

클래스는 반을 의미한다. (무언가가 모여있다.)


자동차를 예로 들었을 때
	- 자동차의 공통요소 
	        가격, 브랜드, 색깔     
     
	클래스를 사용안하면 엄마차, 아빠차, 내차를 만들 때
	가격, 브랜드, 색깔이라는 변수를 계속 만들어야 한다.
	ex)엄마차 색깔, 아빠차 색깔, 내차 색깔, ...
	Car라는 클래스를 만들고 가격, 브랜드, 색깔이란 변수를 선언해 놓고,
	엄마차, 아빠차, 내차를 Car 타입으로 선언하면 엄마차로 아빠차로 내차로
	Car클래스에 접근할 수 있다.

	        추상적인 Car를 momCar라는 객체로 만드는 것
		Car momCar = new Car(); 

	    	momCar는 main() 안에 선언되어서 지역변수
		= stack영역에 momCar가 생김
		Car()가 momCar를 실체화 시켜줌 
		= 실체화 시켜주는 애라서 Car()를 생성자라고 부름
		이제 momCar로 Car 안에있는 애들에게 접근할 수 있음
		new를 만나서 heap메모리에 공간이 생기고 
		heap메모리에 Car()가 가지고 있는 가격, 브랜드, 색깔이 들어감
		거기에 momCar의 가격, 브랜드, 색깔을 넣어줌.
		그럼 momCar의 가격, 브랜드, 색깔이 들어있는 heap메모리의 주소가
		자동으로 Car 클래스로 넘어감
		= 많이 만들어도 heap영역에서 주는 주소는 유일무이함.
		myCar를 만들면 Car()가 momCar에 준 주소랑 같은걸 받는게 아니라
		heap에 새로운 공간이 생기고 새로운 주소를 받는 것.(new를 또 만나서)
		Car myCar = new Car();

		momCar.brand = "Benz";
		myCar.brand = "BMW";
		
Instance = 예시 
"예를 들어 Car를 momCar라고 하자"
예를 든다는건 공포하는 것
Car라고 쓰는건 momCar로 할꺼예요!

인스턴스변수 = 객체 
둘 다 똑같은 말		    