이것이 자바다 - 14.5 표준 API의 함수적 인터페이스까지 들었음



람다식이란?
 - 함수적 프로그래밍
   · y = f(x) 형태의 함수로 구성된 프로그래밍 기법
     - 데이터를 매개값으로 전달하고 결과를 받는 코드들로 구성
     - 객체 지향 프로그래밍 보다는 효율적인 경우
       1. 대용량 데이터의 처리시 유리
          객체 생성후 처리하는 것 보다, 데이터를 바로 처리하는 것이 속도에 유리
          멀티 코어 CPU에서 데이터를 병렬 처리하고 취합할 때 객체보다 함수가 유리
       2. 이벤트 지향 프로그래밍(이벤트가 발생하면 핸들러 함수 실행)에 적합
          반복적인 이벤트 처리는 핸들러 객체보다 핸들러 함수가 적합
   · 현대적 프로그래밍 기법
     - 객체 지향 프로그래밍 + 함수적 프로그래밍

 - (타입 매개변수, ...) -> {실행문; ... }
        x에 해당              y에 해당


 - 자바는 람다식을 함수적 인터페이스의 익명 구현 객체로 취급
   ※ 함수적 인터페이스 : 1개의 추상 메소드를 정의한 인터페이스


 - 기본 구조 
   ( ) -> { };
   Runnable runnable = new Runnable(){
	public void run( ) {  }  //위의 ( )와 { }는 Runnable의 추상 메소드인
   };			    //run의 매개변수와 실행문을 의미한다.
			    //결국 run()을 재정의하는 것 
			    //익명 구현 객체가 Runnable runnable에 들어가는 것

 - 타겟 타입(target type)
   · 람다식이 대입되는 인터페이스를 말한다.
     ex) 인터페이스 변수 = 람다식
           타겟타입
   · 익명 구현 객체를 만들 때 사용하는 인터페이스

 - 함수적 인터페이스(functional interface)
   · 모든 인터페이스는 람다식의 타겟 타입이 될 수 없다.
     - 람다식은 하나의 메소드를 정의하기 때문에
        하나의 추상 메소드만 선언된 인터페이스만 타겟 타입이 될 수 있다.
   · 함수적 인터페이스
     - 하나의 추상 메소드만 선언된 인터페이스
   · @FunctionalInterface
     - 어노테이션이 붙어 있으면 하나의 추상 메소드만을 가지는지 컴파일러가 체크함
     - 두 개 이상의 추상 메소드가 선언되어 있으면 오류 발생
     - 함수적 인터페이스라고 해서 꼭 @FunctionalInterface가 붙어 있어야 하는 것은 아니다.
   · 매개 변수와 리턴값이 없는 람다식
     - 인터페이스 변수 = () -> {};
   · 매개 변수가 있는 람다식
     - 인터페이스 변수 = (매개변수, ...) -> { ... };
        ex) MyFunctionalInterface fi = x -> { ... };
             fi.method(5);
             메소드 호출시 받은 매개변수 5가 람다식의 매개 변수로 전달되고
             { }에서 매개 변수를 이용해서 실행문을 실행
   · 리턴값이 있는 람다식
     - 인터페이스 변수 = (x, y) -> { ...; return 값;};

 - 클래스의 멤버와 로컬 변수 사용
   · 람다식 실행 블록에는 클래스의 멤버를 제약 없이 사용할 수 있다.
   · 람다식 실행 블록내에서 this는 람다식을 실행한 객체의 참조이다.

 - 로컬 변수의 사용
   · 람다식은 함수적 인터페이스의 익명 구현 객체를 생성한다.
   · 람다식에서 사용하는 외부 로컬 변수는 final 특성을 갖는다.★★★
     (메소드 안에 람다식을 만들면 메소드의 매개변수와 로컬필드는
      람다식 안에서 수정할 수 없고 사용만 가능하다.)

표준 API의 함수적 인터페이스
 - 한 개의 추상 메소드를 가지는 인터페이스들은 모두 람다식 사용 가능
    ex) Runnable 인터페이스
         Runnable runnable = () -> {
	for(int i=0;i<10;i++){
	     syso(i);
	}
         }
         Thread thread = new Thread(runnable);
         thread.start();
         지금까지 이렇게 썼지만 람다식을 사용하면
         Thread thread = new Thread(()->{
	for(int i=0;i<10;i++){
	     syso(i);
	}
         }
         thread.start();
         이런식으로 만들 수 있다.
         (보통 이렇게 많이 사용한다.)

 - Consumer(소비자) 함수적 인터페이스
   · 리턴값이 없는 accept()를 가지고 있다.
   · 단지 매개값을 소비(Consume)하는 역할만 한다.
     ※ 소비 : 사용만 할 뿐 리턴값이 없다는 말
   · Consumer<T>
     - Consumer<String> consumer = t -> { t를 소비하는 실행문;};
       Consumer의 타입 파라미터가 String이라서 t도 String 타입을 줘야 한다.

 - Supplier(공급자) 함수적 인터페이스
   · 매개 변수가 없고 리턴값이 있는 getXXX()를 가지고 있다.
   · 실행 후 호출한 곳으로 데이터를 리턴(공급)하는 역할을 한다.
   · Supplier<T>
     - Supplier<String> supplier = () -> { ...; return "문자열"; };

 - Function(기능) 함수적 인터페이스
   · 매개변수와 리턴값이 있는 applyXXX()를 가지고 있다.
   · 매개값을 리턴값으로 매핑(타입변환)하는 역할을 한다.
     ex) A(매개값)를 B(리턴값)로 리턴한다.
   · Function<T,R>
     - Function<Student, String> function = t -> return t.getName();
       Student를 String으로 매핑한 것 

 - Operator(연산자) 함수적 인터페이스 
   · Function과 동일하지만 이들 메소드는 매개값을 리턴값으로 매핑하는 역할보다는
     매개값을 이용해서 연산을 수행한 후 동일한 타입으로 리턴값을 제공하는 역할
   · IntBinaryOperator
     - IntBinaryOperator operator = (a, b) -> { ...; return int 값; };
       매개값 a, b는 모두 int 타입이고 리턴값도 동일하게 int 타입

 - Predicate(사실이라고 단정하다) 함수적 인터페이스
   · 매개변수와 boolean 리턴값이 있는 testXXX()를 가지고 있다.
   · 매개값을 조사해서 true/false를 리턴하는 역할을 한다.
   · Predicate<T>
     - Predicate<Student> predicate = t->t.getSex().equals("남자");
       <Student>이므로 매개값 t는 Student 타입이고, 리턴값은 boolean 타입으로 고정

 - andThen()과 compose() 디폴트 메소드
   · 함수적 인터페이스가 가지고 있는 디폴트 메소드
   · 두 개의 함수적 인터페이스를 순차적으로 연결해서 실행한다.
   · 첫번째 리턴값을 두번째 매개값으로 제공해서 최종 결과값을 리턴한다.
   · andThen()과 compose()의 차이점은 어떤 함수적 인터페이스부터 처리하느냐이다.
     매개값으로 받은 인터페이스부터 실행하느냐 
     참조변수인 인터페이스를 먼저 실행하느냐의 차이
   · andThen() 디폴트 메소드
     - 인터페이스 AB = 인터페이스 A.andThen(인터페이스 B);
        최종결과 = 인터페이스 AB.method();
        인터페이스 AB의 메소드 --> 인터페이스 A의 람다식 --> 인터페이스 B의 람다식 --> 결과
   · compose() 디폴트 메소드
     - 인터페이스 AB = 인터페이스 A.compose(인터페이스 B);
        최종결과 = 인터페이스 AB.method();
        인터페이스 AB의 메소드 --> 인터페이스 B의 람다식 --> 인터페이스 A의 람다식 --> 결과
   · Consumer의 순차적 연결
     - Consumer 종류의 함수적 인터페이스는 처리 결과를 리턴하지 않기 때문에
       andThen()과 compose() 디폴트 메소드는 함수적 인터페이스의 호출 순서만 정한다.
     - Consumer<member> consumerA = m -> syso(m.getName());
        Consumer<member> consumerB = m -> syso(m.getId());

        Consumer<member> consumerAB = consumerA.andThen(consumerB);
        //consumerA 실행하고 consumerB 실행
        consumerAB.accept(new Member("홍길동","hong",null));

        Consumer<member> consumerAB = consumerA.compose(consumerB);
        //consumerB 실행하고 consumerA 실행
        consumerAB.accept(new Member("홍길동","hong",null));

   · Function의 순차적 연결
     - Function과 Operator 종류의 함수적 인터페이스는
       먼저 실행한 함수적 인터페이스의 결과를 다음 함수적 인터페이스의 매개값으로
       넘겨주고, 최종 처리 결과를 리턴한다.

 - and(), or(), negate() 디폴트 메소드와 isEqual() 정적 메소드
   · and(), or(), negate() 디폴트 메소드
     - Predicate 함수적 인터페이스의 디폴트 메소드
     - and() : &&와 대응 - 두 Predicate가 모두 true를 리턴하면 true
     - or() : ||와 대응 - 두 Predicate 중 하나만 true를 리턴하면 true
     - negate() : !과 대응 - Predicate의 결과가 true면 false를 리턴

 - isEqual() 정적 메소드
   · Predicate<T>의 정적 메소드
     - Predicate<Object> predicate = Predicate.isEqual(targetObject);
       boolean result = predicate.test(sourceObject);하면
       Objects.equals(sourceObject, targetObject) 실행
       ※ Objects.equals() : 같은 주소면 true, 다른 주소면 false, 
                                 둘 다 null이면 true, 하나만 null이면 false
    ※ 언제 사용하나요 ?
       - 어떤 값을 찾을 때나 어떤 값을 가지고 비교할 때
          test()에 항목들을 넣어서 true/false로 걸러내는 용도로 사용한다.

 - minBy(), maxBy() 정적 메소드
   · BinaryOperator<T> 함수적 인터페이스의 정적 메소드
   · Comparator를 이용해서 최대 T와 최소 T를 얻는 BinaryOperator<T>를 리턴한다.
   · minBy(Comparator<? super T> comparator)
   · maxBy(Comparator<? super T> comparator)
   · Comparator<T>는 o1과 o2를 비교해서 같으면 0, o1이 크면 양수, o1이 작으면 음수를 리턴
     ※ Comparator<T>도 compare()만 있는 함수적 인터페이스
   · Comparator<T>를 타겟 타입으로 하는 람다식
     - (o1, o2) -> { ...; return int 값; }
     만약 o1과 o2가 둘 다 int 타입이라면
     - (o1, o2) -> Integer.compare(o1, o2);

 - 메소드 참조( :: )
   · 메소드를 참조해서 매개변수의 정보 및 리턴타입을 알아내어
     람다식에서 불필요한 매개변수를 제거하는 것이 목적
   · 종종 람다식은 기존 메소드를 단순하게 호출만 하는 경우가 있음
     ex) (left, right) -> Math.max(left, right);
                        ↓
                   Math :: max;(메소드 참조)
          어차피 매개변수 left, right가 들어와서 
          max의 매개변수 left, right로 들어가기 때문에
          max의 left, right를 생략한 것
   · 메소드 참조도 람다식과 마찬가지로 
     인터페이스의 익명 구현 객체로 생성됨
     - 타겟 타입에서 추상 메소드의 
        매개변수 및 리턴 타입에 따라 메소드 참조도 달라진다.
     ex) IntBinaryOperator operator = Math :: max; 
          IntBinaryOperator 인터페이스는 두개의 int 매개값을 받아 int 값을 리턴하므로
          동일한 매개값과 리턴 타입을 갖는 Math 클래스의 max() 메소드를 참조할 수 있다.★
          (max()도 두개의 int 매개값을 받아 int 값을 리턴)

 - 정적 메소드와 인스턴스 메소드 참조
   · 정적 메소드 참조
     - 클래스 :: 메소드
     ex) operator = (x, y) -> Calculator.staticMethod(x, y);
          람다식에서 int 매개값 2개를 받고 int를 리턴하고
          Calculator의 staticMethod()가 매개값 2개를 받고 int를 리턴하니까
          메소드 참조로 바꿀 수 있다.
          operator = Calculator :: staticMethod;//정적 메소드 참조
          
   · 인스턴스 메소드 참조
     - 참조변수 :: 메소드
     ex) Calculator obj = new Calcutor();
          operator = (x, y) -> obj.instanceMethod(x, y);
          람다식에서 int 매개값 2개를 받고 int를 리턴하고
          Calculator의 staticMethod()가 매개값 2개를 받고 int를 리턴하니까
          메소드 참조로 바꿀 수 있다.
          operator = obj :: instanceMethod;//인스턴스 메소드 참조 
   ※ 정적 메소드 참조와 인스턴스 메소드 참조의 차이점은
       클래스 이름이 오느냐, 참조변수 이름이 오느냐 
   ※ 메소드 참조를 사용하려면 메소드의 매개변수 타입, 갯수, 메소드 리턴타입과★★★★
       람다식(인터페이스의 추상메소드)의 매개변수 타입, 갯수, 리턴타입이 같아야 한다.★★★

 - 매개변수의 메소드 참조
   · (a, b) -> {a.instanceMethod(b);
	        ↓
       클래스 :: instanceMethod
       (여기서 클래스는 a의 타입
        a의 타입이 String이면 클래스는 String,
        a의 타입이 Member면 클래스는 Member)
   ex) ToIntBiFunction<String, String> function;
        String, String을 매핑해서 int로 만든다.
        function = (a, b) -> a.compareToIgnoreCase(b);
        ※ compareToIgnoreCase() : 대소문자를 가리지 않고 
			       사전순으로 앞이면 1, 같으면 0, 뒤면 -1 리턴
        function = String :: compareToIgnoreCase;//메소드 참조로 바꾼 것

 - 생성자 참조
   · (a, b) -> {return new 클래스(a,b);}//매개값으로 받은 a,b를 생성자의 매개값으로 주고
                      ↓	          //이렇게 생성된 객체를 리턴
               클래스 :: new	          //실행부에 객체를 생성하고 리턴하는 실행문만 있으면
			          //생성자 참조를 할 수 있다.

				        //String을 매개값으로 받는 Member의 생성자 참조
   ex) Function<String, Member> function1 = Member :: new; 	
        Member member1 = function1.apply("angel");
        apply가 angel을 매개값으로 주고 
        그걸 매개값으로 받은 Member의 생성자가 객체를 생성
        Member :: new의 내부 모습은
        public Member(String id){
	System.out.println("Member(String id) 실행");
	this.id = id;
        }
					        //String, String을 매개값으로 받는 Member의 생성자 참조
   ex2) BiFunction<String, String, Member> function2 = Member :: new;
         Member member2 = function2.apply("신천사","angel");
         apply가 신천사와 angel을 매개값으로 주고 
         그걸 매개값으로 받은 Member의 생성자가 객체를 생성
         Member :: new의 내부 모습은
         public Member(String name, String id){
	  System.out.println("Member(String name, String id) 실행");
              this.name = name;
	  this.id = id;
         }

   · 핵심
     - 람다식(인터페이스가 가진 추상메소드)의 매개변수 타입, 갯수 그리고 리턴타입과
        참조하려는 메소드의 매개변수 타입, 갯수 그리고 리턴타입이 일치하면 메소드 참조 가능
     - 매개변수의 메소드 참조는 인스턴스 메소드를 호출한 매개변수의 타입 :: 인스턴스메소드
        (이 때도 인스턴스 메소드의 매개변수 타입, 갯수 그리고 리턴타입과
         람다식의 매개변수 타입, 갯수 그리고 리턴타입이 일치해야 한다)
     - 매개변수를 받아서 생성자의 매개값으로 주고
        실행부에 객체를 생성해서 객체를 리턴하는 실행문만 있으면 생성자 참조
        매개변수 = 생성자의 매개값


※ Bi가 들어가면 매개값이 2개라는 의미
※ getter&setter에서 getter만 혹은 setter만 필요한 경우
   select Getter or select Setter로 체크하고 만들면
   getter or setter만 만들어진다.