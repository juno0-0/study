복습
추상클래스
 - 일반클래스와 같지만 추상메서드를 넣을 수 있음
 - 클래스들의 공통요소를 선언해 놓은 미완성 클래스
 - 자손 클래스에서 추상메서드를 반드시 구현하도록 강요하기 위해서 사용
추상메서드
 - 선언할 때 { }가 없고 상속받으면 반드시 재정의해야 한다.
인터페이스
 - 추상메서드와 상수만 멤버로 갖는다.
   (1.8버젼 이후 default를 사용한 메서드와 정적메서드도 가질 수 있다.)
 - 메서드는 public abstract가 생략
 - 상수는 static final이 생략
 - 모든 객체가 같은 동작을 하게 하기 위해
--------------------------------------------------------------------------------

인터페이스
 - 상속보다 더 강하다.(강제로 재정의)
 - 인터페이스를 부모로 사용하고 
    인터페이스의 추상메서드를 받아서 구현하는 부분이 자식
 - 인터페이스를 기능별로 나눌 수 있다.
    = 1개에 전부 만들면 search()만 필요한 경우 
       새로 만들어야 하기 때문에.
       기능별, 동작별, 모듈별로 나눠서 만든다.

개발코드가 다형성으로 인터페이스를 참조하면
인터페이스가 객체를 이용하는 것

개발코드 = main
객체 = 구현클래스
인터페이스와 구현클래스를 만들고 비즈니스로직에 
main에서는 사용만 한다.


인터페이스 -- 부모클래스
구현클래스 -- 자식클래스

인터페이스 활용
 - 필드의 다형성 : 구현클래스의 인스턴스를 인터페이스 타입의 참조변수에 넣은 것
 - 인터페이스 배열로 구현 객체 관리 
    = 인터페이스가 부모일 때 자식인 구현클래스들을 배열로 관리
    ex) 1번 Tire[] tires = {new HankookTire(), new HankookTire(), new KumhoTire(), new KumhoTire()};
              Tire = Interface(부모) Hankook, Kumho = 구현클래스(자식)
         2번  Tire[] tires = new Tire[4];
	    tires[0]=new HankookTire();
                tires[1]=new HankookTire();
                tires[2]=new KumhoTire();
                tires[3]=new KumhoTire();
         위 2개는 같은 결과
         (초기값을 알 때는 1번방법, 모를 때는 2번)

 - 강제형변환 : 다형성으로 선언된 후 경우에 따라서 
                    구현클래스에 선언된 필드와 메서드를 사용해야 하는 경우
                     ex) 구현클래스 변수 = (구현클래스) 인터페이스 상수;
 - 매개변수의 다형성 
    = 인터페이스(부모)를 매개변수로 받고 구현클래스(자식)를 매개변수로 준다.
 - instanceof (사용 시 자식부터 쓰고 마지막에 부모타입)
    a라는 참조변수는 A라는 클래스를 인스턴스화한 값을 가르킬 수 있나?
     = a는 A타입이니?

 - default 메소드의 용도
   인터페이스에서 디폴트메서드를 허용한 이유 
    = 기존 인터페이스를 확장해서 새로운 기능을 추가히기 위해서
    = 새로운게 생기면 추상메서드를 만들지 않고 default메서드를 만든다.
    = default 메소드를 사용하면 필요한 경우에만 재정의하고 
       필요하지 않은 경우 재정의를 하지 않는다.
        (재정의에 강제성이 없다.)

 - 정적메서드
    오버라이딩을 하지 않고 클래스(인터페이스)명.메서드명으로 사용한다.

인터페이스를 new하면 익명 객체가 생겨난다.
 -

디버그코드 
 - 테스트코드를 넣어서 어느부분이 문제가 있는지 알아보는 것

 - default 메서드가 있는 인터페이스 상속
    부모 인터페이스에 디폴트 메서드가 정의되어 있을 경우 
    자식 인터페이스에서 디폴트 메서드를 활용하는 3가지 방법
    1. 디폴트 메서드를 단순히 상속만 받는다.
    2. 디폴트 메서드를 재정의해서 실행 내용을 변경한다.
    3. 디폴트 메서드를 추상 메서드로 재선언한다.
        - 자식인터페이스에서 void 메서드명(); 으로 재선언하는 것.
           default로 다시 만드는게 아니다.
	디폴트 → 추상 → 오버라이드

Stack의 구조
 - 게임에서 스택처럼 1개씩 쌓이는 것
   서울, 대전, 대구를 입력(push)하면 밑에서부터 서울, 대전, 대구가 쌓인다
   꺼내는건 맨위에서부터 꺼낸다. (= 메서드영역과 같다.)



이너클래스 
 - has~a : 포함 관계, import
 - is~a : 상속 관계, extends

클래스A
클래스B가 있을 때
B를 사용하는 클래스는 A밖에 없다.
이런 경우 A라는 클래스 안에 B라는 클래스를 넣어버린다.
= B가 A의 멤버가 된다.
 - 장점 : 관리하기 편하다, 보안성이 강하다, 캡슐화

 - 구조 
   class ClassName{
          interface NestedInterfaceName{
          }
   }

 - 이용되는 곳
    UI프로그래밍에서 이벤트를 처리할 목적으로 사용
    화면을 만들 때 많이 쓴다.

 - 종류
   1. 인스턴스 클래스(외부 클래스의 멤버 변수 선언 위치에 선언하며, 외부 클래스의 인스턴스멤버처럼 다루어진다.
                           주로 외부클래스의 인스턴스 멤버들과 관련된 작업에 사용될 목적으로 선언된다.)
       class A{
	class B{
	}
       }
   2. static 클래스(외부 클래스의 멤버 변수 선언 위치에 선언, 외부클래스의 static 멤버처럼 다루어진다.
                       주로 외부클래스의 static멤버, 특히 static메서드에서 사용될 목적으로 생성)
       class A{
	static class B{
	}
       }
   3. 지역 클래스(외부 클래스의 메서드나 초기화 블럭 안에 선언하며, 선언된 내부 영역에서만 사용)
       class A{
	void method(){
	     class B{ }
	}
       }
   4. 익명 클래스(클래스 이름이 없다. 클래스의 선언과 객체의 생성을 동시에 하는 일회용 클래스)