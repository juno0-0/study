DBMS : 데이터 베이스 매니지먼트 시스템
          데이터 베이스를 관리해주는 프로그램

데이터베이스를 사용하는 이유
 - 데이터베이스를 사용하지 않으면 배열, 컬렉션을 사용할 때마다
    새로 값을 넣어줘야 하는데 데이터베이스에 연동을 하면 
    값을 새로 넣을 필요가 없다.

삭제하는 법
 - 제어판 → 프로그램 제거 → oracle database 제거

오라클 서버 일시 중지 시키는 방법
 - 내PC 우클릭 → 관리 → 서비스 및 응용 프로그램 → 서비스 → OracleServiceXE 더블클릭하고 일시 중지
   다시 시작하고 싶으면 같은 방법으로 들어가서 시작을 누른다.

row = 행 = 1개의 자료 = tuple(DB에서) = record(FILE에서) = I/O의 기본형
column = 열 = 행을 만들기 위한 칸 = 필드 = 항목 = 열+열+열=행

테이블
 - 행의 집합
    DEPTNO    DNAME    LOC
      10           경리      서울
      20           인사      인천
      30           영업      용인
      40           전산      수원
 이런 구조의 표를 테이블이라 말한다.

SQL
 - 데이터 베이스에 명령을 주는 것

DQL 
 - DQL(Data Query Language, 질의어) : SELECT - 데이터 검색 시 사용 (가장 많이 사용)

 - DML(Data Manipulation Language, 데이터 조작어) : INSERT - 입력
					       UPDATE - 수정
					       DELETE - 삭제

 - DDL(Data Definition Language, 데이터 정의어) : CREATE - DB 생성
					   ALTER - DB 변경
					   DROP - DB 삭제
					   RENAME - DB 객체이름 변경
					   TRUNCATE - DB 저장 공간 삭제

 - TCL(Transaction Control Language, 트랙잭션 처리어) : COMMIT - 트랜잭션 정상적인 종료처리
					           ROLLBACK - 트랜잭션 취소(COMMIT한거 취소하는 것)
					           SAVEPOINT - 트랙잭션 내 임시 저장점 설정
   DB가 손상되지 않게 하는 것

 - DCL(Data Control Language, 데이터 제어어) : GRANT - DB에 대한 일련의 권한 부여
					REVOKE - DB에 대한 일련의 권한 취소

실행은 ctrl+enter

오라클 사용자 계정 만들기
 - system은 관리자 계정(권한이 있음)
   사용자 계정은 관리자 권한이 있는 system에서 만들어주는 것
 - CREATE USER test1 IDENTIFIED BY test1234; = id : test1, pw : test1234인 계정이 만들어진 것
   (예약어인 경우 대문자를 쓰자)

역할 부여하기
 - GRANT 사용
 - connect (접속할 수 있는 권한을 주는 것)
 - resource (DDL 권한을 주는 것)
 - ex) GRANT connect, resource TO test1;
        test1에게 connect, resource 권한을 준다.

권한의 종류
 - connect : DB접속 권한
 - resource : 테이블 생성 권한
 - create view : 뷰를 생성할 수 있는 권한
 - create procedure : 프로시져를 생성할 수 있는 권한
 - DBA : system과 같은 권한을 주는 것

※ 사용자 계정 만들기와 역할 부여 권한은 system에게만 있다.


호스트 이름에는 사용할 오라클의 IP 주소
포트는 변경하지 않는다.

생성자를 만들었을 때 권한을 안주면 접속이 안된다.

DB는 꼭 1개만 연결하도록 하기
다른걸 연결할 경우 하나는 접속 해제를 하자.
   
테이블 만들기
 - CHAR : size크기의 고정 길이 문자 데이터 타입
             최대크기 : 2000바이트
             최소크기 : 1바이트
 - VARCHAR2 : size 크기의 가변 길이 문자 데이터 타입
                    최대크기 : 4000바이트
                    최소크기 : 1바이트 
 - NVARCHAR2 : 국가별 문자 집합에 따른 size
실제 데이터를 넣기 위한 칸을 만드는 것
                      
이미지를 쓸 땐 BLOB

CONSTRAINT : 제약조건을 주는 키워드

primary key를 주기위해서 constraint라는 제약조건 주는 키워드를 써줘야하고, 
PK_DEPT는 primary key(기본키)의 이름
기본키 : 테이블을 대표하는 키, 1개만 있어야 하고 반드시 존재해야 한다.
           NULL이면 안된다.
ex) CREATE TABLE dept( deptno number(2) CONSTRAINT PK_DEPT PRIMARY KEY, 

외래키 : 테이블이 2개 있고, 2개를 관계 맺기 할 때
           한쪽 테이블의 기본키를 다른 테이블의 외래키로 사용하는 것
           데이터가 중복되어 저장하는 것을 지양한다.
           외래키가 되려면 다른 테이블의 기본키여야 한다.★
ex) deptno number(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT );

sal number(7,2),--(7,2)는 7칸의 소수점 2자리 0000.00, 123.478이 들어오면 반올림되서 123.48이 들어간다.
number만 하면 가변으로 만들어진다(알아서 크기가 늘어남)


--사원 테이블에 샘플 데이터 넣기
INSERT INTO dept (deptno, dname, loc) VALUES(10, '경리부', '서울');
입력할 때는 만든 행의 순서대로 값을 넣는다.


select * from 테이블명 = 컬럼명에 있는 모든 레코드 출력

--정렬은 ORDER BY 정렬하고 싶은 컬럼명

행을 추가한 뒤에 워크시트에서 명령문을 지워도 데이터는 이미 올라가있다.

ALTER TABLE 테이블명
    add 컬럼명 : 컬럼을 추가한다.
    modify 컬럼명 : 컬럼을 수정


SQL 기본
 - Select문 : SQL의 가장 기본이 되는 문장
                테이블에 있는 자료를 검색해낼때 쓰거나, 함수를 써서 데이터를 보여줄 때 사용
                (연산을 하거나 DB에 있는 자료를 꺼내줄 때)
   SELECT [DISTINCT]에서 []는 생략가능하다는 의미, 
                                { , , }는 중괄호 안에 있는 것 중 하나를 쓰면 된다는 의미
   FROM은 꼭 써야한다는 의미
   DISTINCT는 중복 제거

SELECT DISTINCT job FROM emp;
emp테이블의 job행에서 중복을 제거한 것만 보여준다.

SELECT DISTINCT job [as] 직위 FROM emp;
as는 컬럼의 제목이 특별히 없으면 직위로 바꿔주는 것
as는 생략이 가능하다
혹은 "직위"로 써도 된다.

연산이 필요한 경우
SELECT sal, sal*0.03 from emp; 이런식으로 바로 연산을 하면 된다.

SELECT ename, comm, sal*12+comm 연봉, NVL(comm,0),sal*12+NVL(comm,0) from emp;에서
NVL(컬럼명,0)은 컬럼명의 값이 NULL이면 0을 넣어줘라라는 의미

NULL도 데이터이다.
0도 아니고 빈공간도 아님.
미확정, 알 수 없는 값이라는 의미
어떤 값인지 알 수 없지만 어떤 값이 존재하는 것
?또는 무한대를 의미한다.
연산, 할당, 비교가 불가능

SELECT ename || '의 직급은 '|| job || '입니다.' 직급 from emp;
여러 컬럼을 연결할 때 쓰는 것
|| (concatentation연산자)
 - 컬럼끼리 연결하는 것

where절 (조건절)
숫자 검색은
SELECT * from emp where sal >= 500;
emp테이블에서 sal이 500이상인 것만 출력

DB에서 =은 같다를 의미, 다르다는 똑같이 != or <> or ^=

SELECT * from emp where ename = '한예슬';
문자를 검색할 때는 ' '를 사용

날짜를 검색할 때는 
이 전이면 작은 것,
이 후면 큰 것
select * from emp where hiredate < to_date('2005/01/01','yyyy/MM/dd');

DB쪽에서는 true/false를 쓰지 않는다.

논리연산자는 그대로 AND, OR, NOT을 사용한다.
select * from emp where deptno = 10 and job = '과장'; <- deptno가 10이고 job이 과장인 사람만 출력
select * from emp where deptno = 10 or job = '과장'; <- deptno가 10이거나 job이 과장인 사람만 출력
select * from emp where not deptno = 10 or job = '과장'; <- deptno가 10이 아니거나 과장인 사람만 출력


select ename from emp where not deptno = 10 or job = '과장'; 
select ename, sal from emp where not deptno = 10 or job = '과장';
↑ deptno가 10이거나 job이 과장인 사람의 이름과 월급을 출력
모든 컬럼을 보고싶을 때는 *로 하고 해당컬럼만 보고싶을 경우 컬럼명을 써준다.

select * from emp where sal >= 400 and sal <= 500;
급여가 400~500인 사람

select * from emp where sal < 400 or sal > 500;
급여가 400미만이거나 500초과인 사람

between a and b : a와 b 사이
select * from emp where sal between 400 and 500;
급여가 400~500인 사람
select * from emp where sal >= 400 and sal <= 500;와 같다.

--in : ~안에(많이 씀)
select * from emp where comm in(80,100,200);
comm이 80이거나 100이거나 200인 사람
select * from emp where comm = 80 or comm = 100 or comm = 200;와 같다.

select * from emp where comm not in(80,100,200);
comm이 80도 아니고 100도 아니고 200도 아닌 사람
select * from emp where comm != 80 and comm <> 100 and comm ^= 200;와 같다.
여기서 select * from emp만 블록잡아서 실행하면 저 부분만 실행이 된다.

like : 유사일치(비슷하게 일치하는 것)
ex) 김씨인 사람, 서울 어딘가에 사는 사람 등
와일드카드 - % : 문자가 없거나 하나 이상의 어떤 문자가 와도 상관없다.
               -  _ : 하나의 문자가 어떤 값이 와도 상관없다.
문자가 없어도 되는 경우 %, 문자가 꼭 1개는 있어야 하는 경우 _
select * from emp where ename like '이%';
ename에서 이씨인 사람의 이름을 가진 사람 출력
select * from emp where ename like '%이%';
ename에서 이름에 이가 들어간 사람의 이름을 출력
select * from emp where ename like '__성';
ename에서 첫글자 아무거나, 두번째 글자 아무거나 들어가고 마지막 글자가 성인 사람 이름을 출력
select * from emp where job like '사%';
job에서 '사'로 시작하는 사람 찾기
select * from emp where job not like '사%';
job에서 '사'로 시작하지 않는 사람 찾기
select * from emp where ename not like '이%';
ename에서 성이 이씨가 아닌 사람 찾기

select * from emp where comm is null;
comm이 null인 사람만 찾기

정렬을 위한 order by절
 - 자바에서 데이터베이스로 select문을 해서 보낼 때 정렬을 해서 보내는 것
    데이터베이스에서 자바로 데이터를 가지고 올 때 정렬을 해서 가져오는 것
특별히 정렬 기준을 주지 않으면 오름차순 출력(값이 같으면 입력한 순서대로 출력)
select * from emp order by sal;
급여가 낮은 사람부터 높은 사람 순서로 출력, 급여가 같으면 먼저 입력한 순서대로
select * from emp order by sal desc;
급여가 높은 사람부터 낮은 사람 순서로 출력
select * from emp order by sal desc, deptno desc;
급여 내림차순으로 정렬하지만 급여가 같으면, deptno 내림차순으로 출력
select * from emp order by ename;
이름순으로 정렬
select * from emp where job = '사원' order by comm;
사원중에서 급여 오름차순 정렬
select * from emp where job != '사장' order by hiredate desc;
select * from emp where job not like '사장' order by hiredate desc;
사장은 제외하고 최근 입사한 사람 순서대로 조건
asc는 오름차순(생략가능), desc는 내림차순 

DB 끌 때는 접속해지하고 닫을 때 저장하냐고 물어보면 저장한다고 하고 저장할 위치 골라서 저장하기



