DBMS(DataBase Management System)
 - 데이터 베이스를 관리해주는 프로그램
 - 다수의 사용자들이 데이터베이스 내의 
    데이터를 접근할 수 있도록 해주는 소프트웨어 도구의 집합

Schema : 연관된 표들을 그룹핑한 일종의 디렉토리
             테이블의 구조
User : 오라클에서는 사용자가 가장 중요한 개념 중 하나
         각각의 사용자는 각각의 사용자가 접속 가능한 테이블이 있음
         그 사용자에게 속하는 스키마가 생성된다.
         스키마와 사용자는 같은 것이 아니지만,
         사용자가 생성되면 스키마가 함께 생성되는 것.


관계형 데이터베이스 관리 시스템
 - 아래와 같은 구조를 TABLE이라고 함.
    DEPTNO    DNAME    LOC    
       10          경리      서울    
       20          인사      인천     
       30          영업      용인
       40          전산      수원
   Column : 열, 행을 만들기 위한 칸, 필드, 항목 
   row : 행, 1개의 자료, DB에서는 tuple, FILE에서는 record라 부름
           열+ ... +열 = 행

SQL(Structured Query Language)
 - 데이터 베이스에 명령을 주는 것
 - 엑셀보다 불편하고 어려운데 DB를 사용하는 이유
   · 물리적 한계 : 엑셀은 물리적으로 많은 데이터를 넣기가 힘들다. 최대 65000여개
   · 명령어를 통해 DB를 제어할 수 있다 : 명령어를 컴퓨터 프로그램을 통해 데이터를 자동적으로 만들 수 있다.
				   명령어를 통해 데이터를 가공하고 가치있는 무언가를 만드는 것을 자동화 할 수 있다.
 - 대소문자를 가리지 않음
 - 문자열 표기는 ' '를 사용
 - 이름을 지을 때 띄어쓰기 대신 _를 사용
 - * = ALL을 의미

SQL 명령어의 유형
 - DQL(Data Query Language, 질의어)
   · SELECT : 데이터 검색시 사용★★★
 
 - DML(Data Manipulation Language, 데이터 조작어)
   · INSERT : 데이터 입력
   · UPDATE : 데이터 수정
   · DELETE : 데이터 삭제

 - DDL(Data Definition Language, 데이터 정의어)
   · CREATE : 데이터베이스 생성
   · ALTER : 데이터베이스 변경, 기존의 테이블 수정(추가, 크기변경 등)
   · DROP : 데이터베이스 삭제, 테이블 자체를 삭제
   · TRUNCATE : 데이터베이스 저장 공간 삭제, 
                     테이블에 저장된 모든 내용을 삭제(테이블은 남아있음)
   · RENAME : 데이터베이스 객체이름 변경, 테이블 이름 변경


 - TCL(Transaction Control Language, 트랙잭션 처리어)
 ※ Transaction : 데이터베이스의 상태를 변화시키기 위해 수행하는 작업의 단위
   · COMMIT : 트랜잭션의 정상적인 종료처리, 변경된 내용을 영구 저장
   · ROLLBACK : 트랜잭션 취소, 변경되기 이전 상태로 되돌림
   · SAVEPOINT : 트랜잭션 내에 세이브포인트 설정

 - DCL(Data Control Language, 데이터 제어어)
   · GRANT : 데이터베이스에 대한 일련의 권한 부여
   · REVOKE : 데이터베이스에 대한 일련의 권한 취소

사용자 계정 만들기
 - CREATE USER [사용자ID] identified by [비밀번호];

역할 부여하기
 - GRANT 키워드를 사용
 - connect : 접속할 수 있는 권한을 줌
 - resource : DDL 권한을 줌
 - 사용자 계정 만들기와 역할 부여 권한은 system에게만 있다.

데이터 타입
 - CHAR(size)
   · size 크기의 고정 길이 문자 데이터 타입
     크기를 10으로 지정하고 지정된 길이보다 짧은 데이터가 입력되면
     남은 칸은 공백으로 채워짐
   · 최대타입 : 2000바이트
   · 최소타입 : 1바이트

 - VARCHAR2(size)
   · size 크기의 가변 길이 문자 데이터 타입
     크기를 50으로 줘도 저장되는 데이터의 길이가 6이면
     길이가 6만 할당된다.
   · 최대타입 : 4000바이트
   · 최소타입 : 1바이트
   · 한글은 2바이트

 - NVARCHAR2(size)
   · 국가별 문자 집합에 따른 size 크기의 
   · 문자 또는 바이트의 가변 길이 문자 데이터 타입
     크기를 50으로 줘도 저장되는 데이터의 길이가 6이면
     길이가 6만 할당된다.
   · 최대크기 : 4000바이트
   · 최소크기 : 1바이트

 - NUMBER(p,s)
   · p칸의 소수점 s자리
     ex) number(8,2) : 000000.00
          123456.789가 들어오면 반올림되서 123456.79가 들어감
   · p : 1 ~ 38
   · s : -84 ~ 127
   · 매개변수가 없으면 가변 길이가 된다.

 - DATE
   · 날짜 형식을 저장하기 위한 데이터 타입
   · 컬럼을 만들고 자료를 삽입할 때 
     to_date('xxxx-xx-xx','yyyy-MM-dd') 이런 식으로 사용

 - ROWID
   · 데이터베이스에서 데이터마다의 주소를 의미
   · 각각의 데이터를 구분할 수 있는 유일한 ID
   · 구조
     - 오브젝트 번호(32bit,6자리) : 해당 데이터가 속하는 오브젝트 번호
		                   오브젝트별로 유일값을 가지고 있다.
     - 상대 파일 번호(10bit,3자리) : 테이블스페이스는 여러 개의 DATAFILE을 생성할 수 있다.
			        10bit이기 때문에 테이블스페이스당 1023개의 DATAFILE을 추가 가능
			        DATAFILE은 해당 테이블스페이스의 상대 파일 번호를 의미
			        각 데이터별로 유일한 값을 가짐
     - 블록 번호(22bit,6자리) : 파일 안에 어느 블록인지 의미
     - 데이터 번호(16bit,3자리) : 오브젝트 번호, 파일번호, 블록 번호가 같으면 데이터 번호는 
			    블록별로 데이터가 저장되어 있는 순서를 의미
     = 총 80bit(18자리) = 10byte

 - BLOB
   · 대용량의 바이너리 데이터를 저장하기 위한 데이터 타입
   · 최대크기 : 4GB
   · 이미지를 쓸 때 사용

 - CLOB
   · 대용량의 텍스트 데이터를 저장하기 위한 데이터 타입
   · 최대크기 : 4GB
             
 - BFILE
   · 대용량의 바이너리 데이터를 파일 형태로 저장하기 위한 데이터 타입
   · 최대크기 : 4GB

 - TIMESTAMP(n)
   · DATE 데이터 타입의 확장된 형태
   · n은 milli second 자리수로 최대 9자리까지 표현 가능

 - INTERVAL YEAR TO MONTH
   · 년과 월을 이용하여 기간을 저장
 
 - INTERVAL DAY TO SECOND
   · 일, 시, 분, 초를 이용하여 기간을 저장
   · 두 날짜값의 정확한 차이를 표현하는데 유용

ALTER TABLE 테이블명 add 컬럼명 : 컬럼을 추가
		     modify 컬럼명 : 컬럼을 수정

데이터 무결성과 제약 조건
 - NOT NULL
   · NULL도 데이터, 0도 아니고 빈 공간도 아니라
     미확정, 알 수 없는 값이라는 의미
     어떤 값인지 알 수 없지만 어떤 값이 존재하는 것
     ? 또는 무한대를 의미
     연산, 할당, 비교가 불가능
   · 필수로 등록되어야 한다.(누락되면 안된다.)

 - CONSTRAINT : 제약 조건을 주는 키워드
 - 기본키(Primary Key)
   · 레코드를 식별하는 대표 값(기본키)
   · 중복이 되면 안되고, 반드시 존재해야 함(NULL 불가능)
   · 테이블을 만들 때 지정하거나, 테이블을 만든 후 만들 수 있다.(ALTER 사용)
   · 컬럼명 타입 CONSTRAINT 기본키의이름(PK_DEPT) PRIMARY KEY
     ex) CREATE TABLE dept( deptno number(2) CONSTRAINT PK_DEPT PRIMARY KEY, 
                   	            dname varchar2(14),
		            loc varchar2(13) );

 - 외래키(Foreign Key)
   · 테이블이 2개 있고, 2개를 관계 맺기 할 때
     한쪽 테이블의 기본키를 다른 테이블의 외래키로 사용
   · 관계형 데이터베이스는 데이터가 중복되어 저장하는 것을 지양
   · 외래키가 되려면 다른 테이블의 기본키여야 하고, 같은 타입이어야 한다.★★★★★
   · 컬럼명 타입 CONSTRAINT 외래키의이름(FK_DEPTNO) REFERENCES 연결할테이블명
     ex) deptno number(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT

SELETE문
 - SQL의 가장 기본이 되는 문장
 - 테이블에 있는 자료를 검색할 때나, 함수를 써서 데이터를 보여줄 때 사용

 - SELECT 컬럼명 FROM 테이블명;이 기본 구조
    [ ]는 생략 가능하다는 의미,
    { , , }는 안에 있는 것 중 하나를 쓰면 된다는 의미
   · SELECT * FROM 테이블명 : 테이블에 있는 모든 레코드 출력, * = ALL
     만약 부분만 필요하면 SELECT 컬럼명1, 컬럼명2 FROM 테이블명;

 - DISTINCT : 중복 제거
    ex) SELECT DISTINCT job FROM emp;
         emp 테이블의 job행에서 중복을 제거한 결과를 보여줌

 - 연산이 필요한 경우
    ex) SELECT sal, sal*0.03 FROM emp;
         sal행과 sal행*0.03의 결과를 보여줌

 - 컬럼에 들어있는 값이 NULL인 경우 연산이 불가능하기 때문에
    NVL함수를 사용
    ex) SELECT comm, sal*12+comm, NVL(comm,0),sal*12+NVL(comm,0) FROM emp;
         comm의 값이 NULL이면 0을 넣어서 계산해라

 - 컬럼에 별칭 부여하기
   · as 뒤에 별칭을 쓰거나 그냥 별칭만 쓴다.
   · " "로 별칭을 부여한다.
   ex) SELECT DISTINCT job [as] 직위 FROM emp;
        SELECT DISTINCT job "직위" FROM emp;

 - Concatenation 연산자
   · 여러 개의 컬럼을 연결할 때 사용
     ||를 컬럼과 문자열 사이에 기술하여 하나로 연결
     ex) SELECT ename || '의 직급은 '|| job || '입니다.' 직급 from emp;

WHERE(조건절)
 - 원하는 row만 얻으려면 로우를 제한하는 조건을 제시
 - 비교 연산자
   · = : 같다
   · > : 크다
   · < : 작다
   · >= : 크거나 같다
   · <= : 작거나 같다
   · <>,!=,^= : 다르다
   · 날짜의 경우 이 전이면 작은 것, 이 후면 큰 것

 - 논리 연산자
   · AND : 두 조건 모두 참인 것만 검색
   · OR : 두 조건 중 하나만 참이어도 검색
   · NOT : 두 조건 다 거짓인 것만 검색

 - BETWEEN AND 연산자
   · BETWEEN a AND b : a와 b 사이
   · 특정 범위 내에 속하는 데이터인지 알아본다.
     ex) SELECT * FROM emp where sal between 400 and 500;
          SELECT * FROM emp where sal >= 400 and sal <= 500;과 같다.

 - IN 연산자
   · 특정 필드의 값이 A이거나 B이거나 C 중 하나만 만족하더라도 출력
   · in() : ~안에
     ex) SELECT * FROM emp where comm in(80,100,200);
          SELECT * FROM emp where comm = 80 or comm = 100 or comm = 200;과 같다.

 - LIKE 연산자와 와일드카드
   · LIKE : 유사일치(비슷하게라도 일치하는 것)
   · LIKE 다음에는 pattern을 기술해야 하는데 %와 _ 와일드카드가 있다.
     - % : 문자가 없거나, 하나 이상의 어떤 문자가 와도 상관없음
     - _ : 하나의 문자가 어떤 값이 와도 상관없음.
     ※ 문자가 없어도 되는 경우 %, 꼭 1개는 있어야 하는 경우 _를 사용

 - NULL인 값을 찾기 위한 IS NULL
   · SELECT * FROM emp where comm is null;
     comm의 값이 null인 것 찾기
   · SELECT * FROM emp where comm is not null;
     comm의 값이 null이 아닌 것 찾기

 - 정렬을 위한 ORDER BY절
   · ORDER BY 컬럼 : 컬럼을 기준으로 정렬
   · asc : 오름차순, 생략 가능
   · desc : 내림차순
   · NULL의 경우 오름차순이면 가장 마지막에 출력
	         내림차순이면 가장 먼저 출력
   · 여러 가지 조건 제시
     ex) 입사일이 느린 순으로 출력하되 입사일이 같으면 이름순으로 출력
          SELECT * FROM emp order by hiredate desc, ename;

※ 행을 추가한 뒤에 워크시트에서 명령문을 지워도 데이터는 계속 올라가있다.
※ 실행문에서 블록을 잡아서 실행하면 그 블록의 내용만 실행된다.
    ex) SELECT * FROM emp order by hiredate desc, ename;
         여기서 SELECT * FROM emp만 블록 잡아서 실행하면
         emp테이블의 모든 자료가 출력







