복습
생성자 
	- 메서드와 기능은 비슷하지만 모습이 다르다.
	   접근권한제어자 클래스명()
	   메서드는 리턴타입 이름()
	   생성자는 new를 하면 힙메모리에 올라가면서 자동으로 호출(이후에 호출 못함)
	   메서드는 내가 필요할 때 호출해서 사용할 수 있다.

	- new를 하면서 힙메모리에 올릴 때 생성자를 호출
	  (만들어 놓은게 있으면 그걸 호출하고
	   없으면 컴파일러가 기본생성자를 만들어서 호출)

	- 기본생성자
	  클래스명 객체명 = new 생성자();
	  접근권한제어자 클래스명(){}

	- 명시적 생성자
	  클래스명 객체명 = new 생성자(값, 값, ...);
	  접근권한제어자 클래스명(타입 매개변수1, 타입 매개변수2, ...){}

	  클래스명 객체명 = new 생성자(값, 값, ...); 했는데 오류가 나면
	  매개변수의 타입, 순서, 갯수가 일치하는 생성자가 없다는 뜻이므로
	  일치하는 생성자를 하나 만들어준다.

	  클래스명 객체명 = new 생성자1(new 생성자2());
	  접근권한제어자 클래스명(클래스명 매개변수);
	  = 매개변수에 들어있는 new 생성자()를 하면 힙메모리에 
	     공간이 생기고 그 주소를 받을 변수가 매개변수인 것.
	     생성자1에서 생성자2를 참조하는 것.
	  
this
	1. (현재 클래스의 필드) 자기 자신
	   this.	

	2. 생성자에서 다른 생성자를 호출할 때
	    첫째 줄에만 쓸 수 있다.
	    1개의 생성자 안에서 1개만 쓸 수 있다.
	    일반메서드에서는 사용 불가능(this.만 사용가능)
		사용 예) main()는 프로그램의 시작점 
			main()에서는 지시를 한다. = 비즈니스 로직
			프로그램을 짤 때 생성자가 여러개 필요할 경우
			생성자를 여러개 만들어서 main()에서 객체화를 계속 하지 말고
			기존의 생성자 안에서 this()로 호출해서 사용만 한다.
			목적 : 기능별로 분류하고 관리하기 편하게 하기 위해서 사용	

변수는 같은 이름이 있다면 가장 가까운 이름을 가져다 쓴다.
-----------------------------------------------------
메서드 
	- 객체의 동작(기능)에 해당
	- 메서드를 호출하게 되면 중괄호 블록에 있는 모든 코드를 일괄적으로 실행.
	
	- 메서드 선언(정의)
	   리턴타입 이름(가인수or가매개변수){
		실행할 문장
	   }
	
	- 메서드 사용 
	   이름(실제값or실인수or실매개변수 다 같은말);

	- 리턴타입
	   리턴이 없는 경우 : void
	   리턴이 있는 경우 : 해당하는 타입
	   리턴해야 할 것이 Car라는 클래스의 주소면 
	   리턴타입에 Car(클래스)를 써주면 된다.

	- 메서드 이름
	   숫자로 시작하면 안되고 $,_ 사용 가능.
	   관례적으로 소문자로 작성
	   동사로 작성
	   2개의 단어가 혼합된 이름이면 뒤에 있는 단어의 첫글자를 대문자로 한다.

	- 메서드 오버로딩 
	   똑같은 이름의 메서드를 여러개 만드는 것 = 가독성이 높아짐.
	   리턴타입은 무관. 
	   (double input(), int input() 이렇게 만들어도 매개변수가 같으면 불가능)
	   매개변수의 타입, 순서, 갯수가 달라야 한다.
	   ex) String, int
	        int, String (오버로딩 가능)
	   같은 클래스에서 메서드를 선언하고 메인메서드에서 사용할 때
	   선언한 메서드에 static를 붙혀주거나 객체화를 해서 접근한다.

import '클래스명' (패키지)
= 클래스가 패키지 안에 있는데 가져올껀가?



성적관리
1 누르면 입력하기
2 누르면 조회하기 
switch case문 쓰고

배열써서 성적처리
배열의 특징은 같은 타입만 쓸 수 있는 것
정수는 정수끼리 배열만들고
문자는 문자끼리 배열을 만들기

클래스로 만들 수 있으면 만들고 아니면 그냥 